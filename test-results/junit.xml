<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="608" failures="0" errors="0" time="19.308902074">
    <testsuite name="packages/http-client/src/__tests__/AxiosRequest.test.ts" timestamp="2025-09-07T09:23:45.094Z" hostname="c82ba9db4d53" tests="21" failures="0" errors="0" skipped="0" time="0.028260002">
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should have all HTTP methods" time="0.004853768">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should map to correct method functions" time="0.001092255">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate GET requests correctly" time="0.003992476">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate POST requests correctly" time="0.000744431">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate PUT requests correctly" time="0.000823121">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate DELETE requests correctly" time="0.000698179">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate GET errors" time="0.003309476">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate POST errors" time="0.000670249">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate PUT errors" time="0.000660099">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate DELETE errors" time="0.000535168">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for GET" time="0.000655259">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for POST" time="0.000355575">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for PUT" time="0.000447726">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for DELETE" time="0.000565488">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should support chaining and method calls" time="0.000669659">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should handle concurrent requests" time="0.001069025">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should provide consistent interface across all methods" time="0.000367685">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should maintain object structure" time="0.001305278">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should be extensible" time="0.000459456">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should be the default export of the module" time="0.000267784">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should not expose internal implementation details" time="0.000506937">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" timestamp="2025-09-07T09:23:45.119Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.038623106">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should make DELETE request with correct parameters" time="0.005991634">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.003447148">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should include required headers" time="0.001938977">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001068225">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.000550098">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate axios errors" time="0.002584796">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate HTTP error responses" time="0.000875923">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle authorization errors" time="0.000988514">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle not found errors" time="0.001018894">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle connection timeouts" time="0.001053194">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should support generic type parameters" time="0.000785931">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle complex response types" time="0.000535997">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle void response types" time="0.000633359">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with playlist deletion endpoint" time="0.001486561">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.001501231">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should handle different token formats" time="0.001999398">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle concurrent requests" time="0.001975848">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.001790875">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle network retries gracefully" time="0.0006762">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle empty token" time="0.000848581">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle special characters in URL" time="0.00071934">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle very long URLs" time="0.00073845">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.000618148">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.000963244">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosGet.test.ts" timestamp="2025-09-07T09:23:45.136Z" hostname="c82ba9db4d53" tests="22" failures="0" errors="0" skipped="0" time="0.080100403">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should make GET request with correct parameters" time="0.009623883">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use default timeout of 10 seconds" time="0.00503851">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.002672317">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom config with defaults" time="0.001988528">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should allow custom timeout to override default" time="0.00218766">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom headers with Plex token header" time="0.004757307">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should not allow custom headers to override Plex token" time="0.002510905">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should preserve httpsAgent from default configuration" time="0.001943967">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate axios errors" time="0.004203158">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate HTTP error responses" time="0.001529322">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should handle timeout errors" time="0.001305828">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should support generic type parameters" time="0.001177736">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should handle complex response types" time="0.002215761">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should always include X-Plex-Token header" time="0.001677893">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should handle different token formats" time="0.003849363">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should work with different Plex API endpoints" time="0.00216498">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle concurrent requests" time="0.002267042">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle large response data" time="0.019777695">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002246762">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle empty token" time="0.001139416">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle very long URLs" time="0.000780861">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle special characters in URL" time="0.000753021">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPost.test.ts" timestamp="2025-09-07T09:23:45.143Z" hostname="c82ba9db4d53" tests="28" failures="0" errors="0" skipped="0" time="0.08138097">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should make POST request with correct parameters" time="0.009045846">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should use empty object as request body" time="0.001656163">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001233627">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should include required headers" time="0.00789944">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001882717">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.005455086">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001947777">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.000874692">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.001028995">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate axios errors" time="0.003891664">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate HTTP error responses" time="0.014287879">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle server errors" time="0.000856742">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle connection timeouts" time="0.003001162">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should support generic type parameters" time="0.001863286">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle complex response types" time="0.001033515">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle void response types" time="0.000942813">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with playlist creation endpoint" time="0.001347628">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with different Plex server URLs" time="0.001895736">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should handle different token formats" time="0.003279556">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle concurrent requests" time="0.001745194">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.00286449">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle large response payloads" time="0.001348119">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle empty token" time="0.001127846">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle special characters in URL" time="0.002925341">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle very long URLs" time="0.00073239">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should work with HTTP and HTTPS URLs" time="0.000953513">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should always send empty object as body" time="0.000860072">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.00076753">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPut.test.ts" timestamp="2025-09-07T09:23:45.149Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.062433577">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should make PUT request with correct parameters" time="0.007363932">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should use empty object as request body" time="0.001365909">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.000839292">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should include required headers" time="0.004396121">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001287618">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.000882623">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001658723">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.00071748">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000817191">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate axios errors" time="0.003771802">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate HTTP error responses" time="0.001015084">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle authorization errors" time="0.000744811">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle conflict errors" time="0.002069489">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle connection timeouts" time="0.003846604">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should support generic type parameters" time="0.001622782">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle complex response types" time="0.001705823">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle void response types" time="0.00075426">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with playlist update endpoint" time="0.001042854">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.001687243">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should handle different token formats" time="0.003334827">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle concurrent requests" time="0.001548582">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.004267989">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle large response payloads" time="0.001652992">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle network retries gracefully" time="0.000955233">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle empty token" time="0.000941903">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle special characters in URL" time="0.000613249">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle very long URLs" time="0.000689949">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.00076456">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.000934663">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should always send empty object as body" time="0.002532705">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.001068954">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; idempotency characteristics &gt; should be idempotent - multiple calls with same parameters" time="0.00076618">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" timestamp="2025-09-07T09:23:45.159Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.01584188">
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate strings" time="0.002772508">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate numbers" time="0.000421616">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle empty array" time="0.000468756">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle array with no duplicates" time="0.000481546">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle single element array" time="0.000335995">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle array with all same elements" time="0.000279334">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle null and undefined values" time="0.000326135">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle mixed data types" time="0.000440076">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should compare object references, not values" time="0.001782155">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should handle array of objects with same reference" time="0.00065901">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should handle large arrays efficiently" time="0.003304515">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should maintain original order of first occurrences" time="0.000422046">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should be compatible with Array.prototype.filter" time="0.000279724">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should receive correct parameters from filter" time="0.001251698">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" timestamp="2025-09-07T09:23:45.163Z" hostname="c82ba9db4d53" tests="34" failures="0" errors="0" skipped="0" time="0.035909419">
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should construct API URL with protocol, host and path" time="0.004400881">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should work with HTTPS URLs" time="0.000423126">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle paths with query parameters" time="0.000654789">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle root path" time="0.000533197">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when port is missing" time="0.001391709">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when URL has no port in hostname only format" time="0.000563508">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with explicit port numbers" time="0.000841581">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTPS port" time="0.000514997">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTP port" time="0.000502877">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle complex hostnames" time="0.001043074">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should preserve protocol from original URL" time="0.000448306">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with existing paths that get replaced" time="0.000495037">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with query parameters that get replaced" time="0.000311495">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with fragments that get replaced" time="0.000606618">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths starting with slash" time="0.000334045">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths not starting with slash" time="0.000399305">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle empty paths" time="0.000272334">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle complex paths" time="0.000896832">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths with special characters" time="0.000456366">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should throw specific error message about Roon extension" time="0.000513537">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle malformed URLs gracefully" time="0.000460877">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle invalid protocols" time="0.000607038">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with typical Plex server configurations" time="0.001191966">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with Plex API endpoints" time="0.000790611">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should handle dynamic port assignments" time="0.000590578">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve protocol exactly" time="0.000412366">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve hostname exactly" time="0.000616569">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve port exactly" time="0.000527527">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle very long paths" time="0.000264133">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle paths with Unicode characters" time="0.000235023">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle IPv6 addresses with ports" time="0.000229543">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle unusual but valid port numbers" time="0.000492197">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle many URL constructions efficiently" time="0.009076156">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle complex URLs efficiently" time="0.000462546">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" timestamp="2025-09-07T09:23:45.171Z" hostname="c82ba9db4d53" tests="66" failures="0" errors="0" skipped="0" time="0.12746889">
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for empty expression" time="0.00366646">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for whitespace-only expression" time="0.000803001">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for single valid field" time="0.002274111">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for field with operation" time="0.001303498">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields as standalone" time="0.001672803">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields with operations" time="0.00145826">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject invalid field names" time="0.001026965">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject multiple invalid fields" time="0.000498757">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should handle mixed valid and invalid fields" time="0.000458507">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept all valid operations" time="0.001256337">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle operation regex pattern with special characters" time="0.001692954">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject operations with invalid characters" time="0.001054595">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept similarity operations with valid thresholds" time="0.003931745">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle boundary values for similarity thresholds" time="0.001243368">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should validate exact similarity threshold error messages" time="0.002503735">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle similarity operations with malformed syntax" time="0.0021693">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject invalid operations" time="0.000401785">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject similarity operations with invalid thresholds" time="0.000660299">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle missing similarity threshold" time="0.000276464">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept AND operator" time="0.000412176">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept OR operator" time="0.000289244">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject invalid boolean operators" time="0.000274724">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject all invalid boolean operators comprehensively" time="0.000828912">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle mixed case invalid operators" time="0.000583248">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should detect multiple invalid operators in single expression" time="0.000304774">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle multiple boolean operators" time="0.000329524">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should be case sensitive for operators" time="0.000251034">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate balanced expressions" time="0.000757431">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate operator-to-condition ratio precisely" time="0.001017234">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex nested logical patterns" time="0.000601218">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should reject unbalanced expressions" time="0.000473926">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex valid expressions" time="0.000598649">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle expressions with both field:operation and standalone fields" time="0.000404386">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle multiple standalone fields" time="0.000375366">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle all standalone fields" time="0.000297094">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle parsing errors gracefully" time="0.000289554">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should return ValidationResult interface" time="0.000496687">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle very long expressions" time="0.000421226">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with extra whitespace" time="0.000307134">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with no spaces around operators" time="0.000298574">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle tabs and other whitespace characters" time="0.000278454">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle single character inputs" time="0.000282424">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle field extraction edge cases" time="0.000468637">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle regex special characters in field context" time="0.000649009">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should validate exact syntax pattern matching" time="0.000404636">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only operators" time="0.000248843">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only colons" time="0.000242414">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle unicode characters" time="0.000825931">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle extremely malformed expressions" time="0.001818545">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should maintain consistent validation result structure" time="0.002055979">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle moderately complex expressions efficiently" time="0.000514777">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle many validation calls efficiently" time="0.03165612">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle deeply nested validation without performance degradation" time="0.000830862">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should validate real-world music search expressions" time="0.001267468">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should handle all valid field combinations with all operations" time="0.003250345">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide specific error messages for each validation failure" time="0.00717696">
            <system-out>
Expression &quot;artist:match AND&quot; failed validation with errors: [
  [32m&apos;Invalid expression syntax. Expected format: &quot;field[:operation] AND/OR field[:operation]&quot;&apos;[39m
]

            </system-out>
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide helpful error messages" time="0.000662409">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should handle potential ReDoS (Regular Expression Denial of Service) patterns" time="0.004234869">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should sanitize and handle injection-like patterns safely" time="0.001308828">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should handle extremely large expressions without memory issues" time="0.003474928">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should provide clear and actionable error messages" time="0.000834812">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should provide multiple specific errors for expressions with multiple issues" time="0.000874002">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should prioritize validation errors appropriately" time="0.000573948">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should return identical results for identical inputs" time="0.003684231">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should handle concurrent validations consistently" time="0.009495872">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should maintain validation behavior across different input encodings" time="0.001001304">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/functions/parseExpression.test.ts" timestamp="2025-09-07T09:23:45.192Z" hostname="c82ba9db4d53" tests="60" failures="0" errors="0" skipped="0" time="0.063094256">
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should return a function when given a valid expression" time="0.00361709">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should return a function that always returns false for invalid expressions" time="0.001636033">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should handle empty expressions gracefully" time="0.000881692">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artist match" time="0.000881772">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by title match" time="0.00076838">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by album match" time="0.000775151">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artistWithTitle match" time="0.000651139">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artistInTitle match" time="0.00067771">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; contains operation &gt; should filter by artist contains" time="0.000821392">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; contains operation &gt; should filter by title contains" time="0.000559798">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; is operation (exact match) &gt; should filter by exact match (both match and contains)" time="0.000804411">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; not operation (negation) &gt; should filter by negated match" time="0.000531047">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should filter by similarity threshold" time="0.000837362">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should handle different similarity thresholds" time="0.000928613">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should handle missing similarity values" time="0.000356215">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle simple AND expressions" time="0.00068126">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle multiple AND operations" time="0.000535638">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle mixed operations with AND" time="0.002605596">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; OR operations &gt; should handle simple OR expressions" time="0.000614439">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; OR operations &gt; should handle multiple OR operations" time="0.000544518">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; mixed AND/OR operations &gt; should handle combined AND/OR expressions (left-to-right evaluation)" time="0.001361049">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; mixed AND/OR operations &gt; should handle complex mixed expressions" time="0.001036145">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid field names" time="0.003224655">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid operations" time="0.000615049">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid similarity thresholds" time="0.000943633">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle malformed condition format" time="0.001345939">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid operators" time="0.000477746">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle expressions with only operators" time="0.000435406">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with extra whitespace" time="0.000326604">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle case sensitivity in operators" time="0.000377726">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with missing fields" time="0.000295914">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle boundary similarity values" time="0.000495727">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with no valid conditions" time="0.000381296">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle extremely long expressions" time="0.000605668">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle decimal precision in similarity thresholds" time="0.000384835">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; real-world scenarios &gt; should handle typical music search patterns" time="0.000594398">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; real-world scenarios &gt; should handle high-precision matching requirements" time="0.000363475">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; performance &gt; should handle many evaluations efficiently" time="0.01080809">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist match AND title match" time="0.001235387">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist match AND title contains" time="0.000576808">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist contains AND title match" time="0.000547657">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist similarity with threshold" time="0.000896323">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist match AND title similarity" time="0.000354895">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist contains AND title similarity" time="0.000436556">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate dual similarity thresholds" time="0.000502047">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; complex patterns &gt; should migrate triple condition with album" time="0.000477546">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; complex patterns &gt; should migrate complex similarity with match pattern" time="0.000748611">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; exact match patterns (is operation) &gt; should migrate artist exact match" time="0.000548998">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; exact match patterns (is operation) &gt; should migrate title exact match" time="0.000426446">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should migrate artist not match" time="0.000359535">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should migrate title not match" time="0.000262983">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should handle complex negation patterns (current implementation behavior)" time="0.000275273">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; format variations &gt; should handle different function wrapper formats" time="0.000530518">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; format variations &gt; should handle extra whitespace" time="0.001955017">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; decimal precision in legacy filters &gt; should migrate artistWithTitle similarity patterns" time="0.000363065">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; decimal precision in legacy filters &gt; should handle integer thresholds" time="0.000237364">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should return null for unrecognized patterns" time="0.000398026">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should return null for malformed input" time="0.00074019">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should handle errors gracefully" time="0.000551067">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; comprehensive migration test &gt; should migrate all supported patterns correctly" time="0.000792971">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/compareTitles.test.ts" timestamp="2025-09-07T09:23:45.225Z" hostname="c82ba9db4d53" tests="52" failures="0" errors="0" skipped="0" time="0.208327153">
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for undefined inputs" time="0.004014386">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when first parameter is undefined" time="0.000633258">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when second parameter is undefined" time="0.000655579">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for empty strings" time="0.000542778">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches (case insensitive)" time="0.029098604">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches with different cases" time="0.000767341">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should not match different strings" time="0.000596449">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should handle punctuation in matching" time="0.000536797">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should detect when second string contains in first (normalized)" time="0.000911542">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should not detect when first string contains in second" time="0.000637159">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should handle case insensitive contains" time="0.000476907">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should detect contains in both directions when twoWayContain is true" time="0.000828202">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should work with two-way contains for equal strings" time="0.000665049">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains for titles shorter than 5 characters" time="0.000806611">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains when second title is shorter than 5 characters" time="0.000545637">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should use contains when both titles are 5+ characters" time="0.000590458">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should handle exactly 5 character strings" time="0.00071523">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return similarity score between 0 and 1" time="0.000847321">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return higher similarity for similar strings" time="0.000578278">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return perfect similarity for identical strings" time="0.000627349">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString for contains logic" time="0.002637867">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString twice for two-way contains" time="0.000600979">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should not call createSearchString for short titles" time="0.000896583">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should detect reverse containment when shorter string is &gt;=50% of longer string length" time="0.000675499">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should handle exact 50% ratio boundary" time="0.000651999">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should only apply reverse containment when first string is shorter" time="0.000398336">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should not apply reverse containment when standard containment already found" time="0.000506947">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should handle complex remix scenarios" time="0.001286578">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should handle exactly 5-char first string with 4-char second string" time="0.000409796">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should handle exactly 5-char first string with 4-char second string that does not match" time="0.002392983">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should not apply boundary case when first string is not exactly 5 chars" time="0.000495426">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should not apply boundary case when second string is not exactly 4 chars" time="0.0036005">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle null and undefined mixed scenarios" time="0.001346228">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle empty and whitespace-only strings" time="0.001297238">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle strings with only punctuation" time="0.000665649">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle mixed case with whitespace trimming" time="0.000422056">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle boundary lengths around 5-character threshold" time="0.0007165">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should handle strings that are similar but not exact matches" time="0.000836651">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should handle international characters correctly" time="0.001562421">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should calculate different similarity scores for different inputs" time="0.000788571">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; two-way containment comprehensive testing &gt; should work bidirectionally for all valid combinations" time="0.000836951">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; two-way containment comprehensive testing &gt; should respect 5-character minimum in two-way mode" time="0.000588048">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle music track comparisons" time="0.000823851">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle partial track matches" time="0.00069103">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle remixes and versions" time="0.000632029">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle abbreviations" time="0.000658749">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle common music industry patterns" time="0.001179286">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle very long titles" time="0.003202135">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle special characters" time="0.000409776">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle unicode characters" time="0.000337764">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle whitespace variations" time="0.000302744">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; performance &gt; should handle many comparisons efficiently" time="0.123457884">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/createSearchString.test.ts" timestamp="2025-09-07T09:23:45.239Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.024653512">
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should convert string to lowercase" time="0.003568919">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should trim whitespace" time="0.00072451">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle empty string" time="0.000683189">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle whitespace-only string" time="0.000529747">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; a variants &gt; should normalize à, á, â, ã, ä, å to a" time="0.000871382">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; e variants &gt; should normalize è, é, ê, ë to e" time="0.000615018">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; i variants &gt; should normalize ì, í, î, ï to i" time="0.000447316">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; o variants &gt; should normalize ò, ó, ô, õ, ö to o" time="0.000505567">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; u variants &gt; should normalize ù, ú, û, ü to u" time="0.000611408">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; y variants &gt; should normalize ý, ÿ to y" time="0.000425616">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize æ to ae" time="0.000444616">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize œ to oe" time="0.000793141">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ç to c" time="0.000394985">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ñ to n" time="0.000877712">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize music artist names" time="0.000846832">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize song titles" time="0.000619558">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should handle mixed content" time="0.000393285">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle strings with only diacritics" time="0.000264824">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle mixed case with diacritics" time="0.000313615">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle numbers and special characters" time="0.000387695">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle very long strings" time="0.000791731">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; performance &gt; should handle large strings efficiently" time="0.002003558">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should be idempotent" time="0.000259244">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should handle null/undefined gracefully" time="0.001742764">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" timestamp="2025-09-07T09:23:45.245Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.029890065">
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should convert input to lowercase" time="0.003982275">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should trim whitespace from result" time="0.000654279">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle empty string" time="0.000661769">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle whitespace-only string" time="0.00070297">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter out words when filtered=true" time="0.000499517">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should not filter out words when filtered=false" time="0.000413116">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter multiple words" time="0.000465446">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle case insensitive filtering" time="0.000564357">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle words not in filter list" time="0.000612088">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove quotes when removeQuotes=true" time="0.000509617">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should not remove quotes when removeQuotes=false" time="0.000408325">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove various quote types" time="0.000385765">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should handle multiple quote characters" time="0.000467907">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at separators when cutOffSeparators=true" time="0.000806721">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off when cutOffSeparators=false" time="0.000519987">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at last occurrence of separator" time="0.000385926">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should handle multiple separator types" time="0.000547128">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off if separator not found" time="0.000432056">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove empty brackets" time="0.000401456">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove multiple empty brackets" time="0.000299084">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should not remove non-empty brackets" time="0.000293834">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove trailing dashes" time="0.000441146">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove multiple trailing dashes" time="0.000341354">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not remove dashes from short strings" time="0.000287484">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should handle starting dashes" time="0.000296094">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not affect middle dashes" time="0.003284405">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should apply all filters when all flags are true" time="0.000440786">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should handle complex real-world examples" time="0.000311584">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should preserve order of operations" time="0.000410226">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only filtered content" time="0.000319395">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle repeated separators" time="0.000270564">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle mixed whitespace" time="0.000251303">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle very long strings" time="0.000709029">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only separators" time="0.000277173">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should call getCurrentMusicSearchConfig" time="0.000624779">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should use configuration values" time="0.000359305">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should handle empty configuration arrays" time="0.000281074">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle many filter operations efficiently" time="0.000446617">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle large filter arrays efficiently" time="0.001654253">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" timestamp="2025-09-07T09:23:45.254Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.009838386">
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; returns clean song titles" time="0.00218511">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes feat markers" time="0.000407796">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes parentheses content" time="0.000426496">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; prioritizes first occurrence" time="0.000379335">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;&quot; -&gt; &quot;&quot;" time="0.000195863">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;(&quot; -&gt; &quot;&quot;" time="0.000142872">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;feat&quot; -&gt; &quot;&quot;" time="0.000240214">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;a&quot; -&gt; &quot;a&quot;" time="0.000218953">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; removes from first &quot;feat&quot; occurrence" time="0.000447066">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles case sensitivity" time="0.000400475">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; ignores closing parenthesis only" time="0.000238463">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; error handling &gt; handles null and undefined inputs" time="0.001385349">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Despacito feat. Justin Bieber&quot;" time="0.000205953">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Bohemian Rhapsody (Live Aid 1985)&quot;" time="0.000389436">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/hooks/useDualModeEditor.test.ts" timestamp="2025-09-07T09:23:45.257Z" hostname="c82ba9db4d53" tests="3" failures="0" errors="0" skipped="0" time="0.048521564">
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should initialize with default state" time="0.032581083">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should switch view modes" time="0.007560235">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should update data when changed" time="0.004761596">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/api/index.test.ts" timestamp="2025-09-07T09:23:45.258Z" hostname="c82ba9db4d53" tests="2" failures="0" errors="0" skipped="0" time="0.019733014">
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should create mock request and response objects" time="0.011889985">
        </testcase>
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should verify response helper works" time="0.003895334">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/pages/index.test.tsx" timestamp="2025-09-07T09:23:45.259Z" hostname="c82ba9db4d53" tests="27" failures="0" errors="0" skipped="0" time="3.160483579">
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render loading state initially" time="0.115831139">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render without crashing" time="0.019320898">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection component when not connected" time="0.056804099">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection when connected but no URI" time="0.035801337">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should show main content when connected with URI" time="0.273814673">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render all menu items" time="0.119068804">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render menu items as clickable cards" time="0.105208002">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render Plex Settings button" time="0.084690387">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should open Plex settings dialog when button is clicked" time="0.197151518">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should close Plex settings dialog when close button is clicked" time="0.238060666">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex query parameter on router ready" time="0.102026367">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle successful plex verification" time="0.117116647">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should not process plex query when router is not ready" time="0.018460636">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex verification failure" time="0.020175051">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle settings API error gracefully" time="0.01295967">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle auth verification error" time="0.017312541">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should update state when connection is established through PlexConnection" time="0.127672763">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should handle loading state changes correctly" time="0.120712067">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnection" time="0.023068691">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnectionDialog" time="0.154929362">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have proper page title" time="0.025390253">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible navigation links" time="0.117428371">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible button for Plex settings" time="0.095210202">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible dialog when opened" time="0.132045884">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle multiple rapid state changes" time="0.772931996">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should cleanup properly on unmount" time="0.029240496">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle component re-renders without unnecessary API calls" time="0.02156609">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" timestamp="2025-09-07T09:23:45.263Z" hostname="c82ba9db4d53" tests="7" failures="0" errors="0" skipped="0" time="0.871604286">
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should render without crashing" time="0.064694769">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should not display confirmation dialog initially" time="0.015230441">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display confirmation dialog when triggered" time="0.339212581">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should work with exported confirm function" time="0.081260009">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display custom confirmation text" time="0.094820667">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when confirm button is clicked" time="0.133010148">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when cancel button is clicked" time="0.139776272">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" timestamp="2025-09-07T09:23:45.264Z" hostname="c82ba9db4d53" tests="25" failures="0" errors="0" skipped="0" time="1.148238789">
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without crashing" time="0.065205426">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render with children" time="0.018806502">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render multiple children" time="0.02233093">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without children" time="0.014042295">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should apply HTML attributes correctly" time="0.023971094">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle click events" time="0.021693611">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle mouse events" time="0.019127345">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle keyboard events" time="0.026120772">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should have Material-UI Paper base styling" time="0.034769083">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should apply custom margin top styling" time="0.127500181">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should merge with additional sx props when provided" time="0.054915243">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should be keyboard accessible when tabIndex is provided" time="0.019888286">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support ARIA attributes" time="0.025481644">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support screen reader content" time="0.019662463">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render text content" time="0.013463028">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render React elements" time="0.009130596">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render arrays of elements" time="0.023872201">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle conditional rendering" time="0.023271673">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle complex nested content" time="0.025672177">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle null children gracefully" time="0.0201511">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle empty string children" time="0.008588229">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle numeric children" time="0.019572101">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle mixed content types" time="0.011384608">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should not re-render unnecessarily with same props" time="0.028989742">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should handle large amounts of content efficiently" time="0.46575736">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" timestamp="2025-09-07T09:23:45.268Z" hostname="c82ba9db4d53" tests="33" failures="0" errors="0" skipped="0" time="2.532824941">
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render without crashing" time="0.127093645">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should display the correct title" time="0.026935434">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render all action buttons" time="0.02949423">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render view mode toggle buttons" time="0.021374777">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render icons within buttons" time="0.025908129">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show UI mode as selected by default" time="0.025788089">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show JSON mode as selected when specified" time="0.027982969">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when UI mode is clicked" time="0.224309956">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when JSON mode is clicked" time="0.10219885">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should handle clicking the same mode button" time="0.086204297">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should be exclusive selection (only one mode selected at a time)" time="0.049061922">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onReset when reset button is clicked" time="0.076031146">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onSave when save button is clicked" time="0.086754165">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should handle multiple rapid clicks on action buttons" time="0.146493325">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should support keyboard interaction on action buttons" time="0.088001442">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should disable all interactive elements when disabled prop is true" time="0.042172706">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is false" time="0.044717821">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is undefined" time="0.044992455">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should not trigger callbacks when buttons are disabled" time="0.038404123">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have proper layout structure" time="0.078538951">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should apply proper button variants and sizes" time="0.031057332">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have divider between toggle buttons and action buttons" time="0.039093473">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have proper ARIA attributes" time="0.023905452">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should be keyboard navigable" time="0.036806512">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have appropriate button labels" time="0.076730506">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should indicate selected state for view mode buttons" time="0.034373438">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle empty title gracefully" time="0.055298459">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle very long titles" time="0.045498462">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle null callback functions gracefully" time="0.046958293">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle rapid view mode changes" time="0.335670902">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should maintain state consistency during re-renders" time="0.058860757">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should not cause unnecessary re-renders with same props" time="0.036326394">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should handle high frequency interactions efficiently" time="0.314792552">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" timestamp="2025-09-07T09:23:45.273Z" hostname="c82ba9db4d53" tests="4" failures="0" errors="0" skipped="0" time="0.239996423">
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should render without crashing" time="0.158899647">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should display JSON value" time="0.021377577">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle valid JSON changes" time="0.030785018">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle null value gracefully" time="0.025609396">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" timestamp="2025-09-07T09:23:45.274Z" hostname="c82ba9db4d53" tests="20" failures="0" errors="0" skipped="0" time="2.561010902">
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should render loading state initially" time="0.240431219">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should load data on mount" time="0.027831647">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should start in UI mode by default" time="0.131170572">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should switch between UI and JSON modes" time="0.296278026">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should convert data when switching modes" time="0.163136509">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate filter expressions correctly" time="0.121142862">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should accept valid filter expressions" time="0.113351464">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate array structure" time="0.131968293">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should save filters successfully" time="0.060408469">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should reset filters to original data" time="0.102365282">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should not reset if user cancels confirmation" time="0.059210552">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should display error for invalid JSON syntax" time="0.104229077">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should clear validation errors when switching modes" time="0.153414981">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should display filters in UI mode" time="0.017463272">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should update filters in UI mode" time="0.094759486">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Loading States &gt; should disable controls during loading" time="0.127155076">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle keyboard shortcuts in JSON mode" time="0.132198036">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle tab navigation between controls" time="0.102910029">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API load errors gracefully" time="0.267653377">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API save errors gracefully" time="0.108246163">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" timestamp="2025-09-07T09:23:45.276Z" hostname="c82ba9db4d53" tests="19" failures="0" errors="0" skipped="0" time="3.579470439">
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should provide showError function through context" time="0.134577619">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should not display error dialog initially" time="0.032060895">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via context" time="0.445872993">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via export" time="0.241370633">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display stack trace when provided" time="0.462013457">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should not display stack trace section when stack trace is same as error message" time="0.178755513">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when Escape key is pressed" time="0.175841622">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when close button is clicked" time="0.304950656">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should focus close button when dialog opens" time="0.125782397">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle empty error message gracefully" time="0.081978569">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle long error messages" time="0.146557395">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle special characters in error messages" time="0.189516912">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should have proper ARIA attributes" time="0.145502521">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should trap focus within the dialog" time="0.238954589">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should cleanup properly on unmount" time="0.073401489">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle multiple error triggers correctly" time="0.252938293">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle rapid error triggers" time="0.142073674">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should display dialog with correct title" time="0.109040485">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should have full width and small max width" time="0.093399257">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" timestamp="2025-09-07T09:23:45.280Z" hostname="c82ba9db4d53" tests="38" failures="0" errors="0" skipped="0" time="4.341196518">
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with empty state when no value provided" time="0.180325165">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with custom placeholder" time="0.041938153">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should parse existing expression into pills" time="0.08778934">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should handle disabled state" time="0.035141058">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse simple field expressions" time="0.184801187">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse complex expressions with combinators" time="0.060923136">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle incomplete expressions" time="0.086926458">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle similarity expressions with thresholds" time="0.011881365">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle invalid expressions gracefully" time="0.01295086">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should open field selector when add pill is clicked" time="0.208191792">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add field when selected from popup" time="0.154053439">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add AND combinator when adding second field" time="0.227168685">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should not open selector when disabled" time="0.115341382">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should open operation selector when field pill is clicked" time="0.11157295">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should update operation when selected from popup" time="0.147457668">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should handle similarity operation with threshold" time="0.219793213">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should show current operation in popup" time="0.10586001">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should not open operation selector when disabled" time="0.127801265">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should delete pill when delete button is clicked in operation popup" time="0.157251364">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should remove combinator when deleting condition pill" time="0.113982794">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should handle deletion of middle pill in complex expression" time="0.180833032">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle escape key to close popups" time="0.094682165">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle tab navigation through pills" time="0.182401663">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle enter key to activate pills" time="0.0763167">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle completely invalid expression" time="0.038303702">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle mixed valid and invalid tokens" time="0.044792782">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle empty field values gracefully" time="0.039949524">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close field selector when close button is clicked" time="0.187001558">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close operation selector when close button is clicked" time="0.129144474">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close popups when clicking outside" time="0.164112589">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with small size" time="0.028431005">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with medium size" time="0.032953068">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should have proper ARIA attributes" time="0.06114007">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should announce pill configuration state" time="0.082257953">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should support keyboard navigation" time="0.099423081">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should call onChange with updated expression when pills change" time="0.188001662">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should preserve other pills when updating one pill" time="0.172751089">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should handle rapid updates without conflicts" time="0.138858778">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$fufh1kkpdej&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$fufh1kkpdej&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
