<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="501" failures="0" errors="0" time="13.8857839">
    <testsuite name="packages/http-client/src/__tests__/AxiosRequest.test.ts" timestamp="2025-09-07T05:47:19.028Z" hostname="c82ba9db4d53" tests="21" failures="0" errors="0" skipped="0" time="0.023988367">
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should have all HTTP methods" time="0.0034733">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should map to correct method functions" time="0.000749511">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate GET requests correctly" time="0.003141846">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate POST requests correctly" time="0.000634489">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate PUT requests correctly" time="0.000680129">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate DELETE requests correctly" time="0.000564768">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate GET errors" time="0.002518586">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate POST errors" time="0.000618049">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate PUT errors" time="0.000740521">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate DELETE errors" time="0.00066038">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for GET" time="0.000895583">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for POST" time="0.000464917">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for PUT" time="0.000531547">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for DELETE" time="0.000643079">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should support chaining and method calls" time="0.000576418">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should handle concurrent requests" time="0.001071966">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should provide consistent interface across all methods" time="0.000341645">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should maintain object structure" time="0.001082545">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should be extensible" time="0.000419026">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should be the default export of the module" time="0.000267603">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should not expose internal implementation details" time="0.000495677">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" timestamp="2025-09-07T05:47:19.036Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.056130983">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should make DELETE request with correct parameters" time="0.007177313">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.003805975">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should include required headers" time="0.001529352">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.000931814">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.00066042">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate axios errors" time="0.003087214">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate HTTP error responses" time="0.001115476">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle authorization errors" time="0.004396423">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle not found errors" time="0.001438521">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle connection timeouts" time="0.001266599">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should support generic type parameters" time="0.001222348">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle complex response types" time="0.000849413">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle void response types" time="0.000859513">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with playlist deletion endpoint" time="0.001830696">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.00276258">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should handle different token formats" time="0.00351495">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle concurrent requests" time="0.002644529">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002839151">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle network retries gracefully" time="0.001239878">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle empty token" time="0.001473891">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle special characters in URL" time="0.001029985">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle very long URLs" time="0.000952504">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001222878">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.004314232">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosGet.test.ts" timestamp="2025-09-07T05:47:19.042Z" hostname="c82ba9db4d53" tests="22" failures="0" errors="0" skipped="0" time="0.059908288">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should make GET request with correct parameters" time="0.007791473">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use default timeout of 10 seconds" time="0.004004208">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.001905868">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom config with defaults" time="0.00139955">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should allow custom timeout to override default" time="0.00141429">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom headers with Plex token header" time="0.005827075">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should not allow custom headers to override Plex token" time="0.001405571">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should preserve httpsAgent from default configuration" time="0.001460061">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate axios errors" time="0.003855165">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate HTTP error responses" time="0.000982174">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should handle timeout errors" time="0.000861412">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should support generic type parameters" time="0.000785772">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should handle complex response types" time="0.001825187">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should always include X-Plex-Token header" time="0.001523082">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should handle different token formats" time="0.003615892">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should work with different Plex API endpoints" time="0.002821281">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle concurrent requests" time="0.002109381">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle large response data" time="0.00826542">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.001442911">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle empty token" time="0.001109496">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle very long URLs" time="0.000900503">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle special characters in URL" time="0.000649509">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPost.test.ts" timestamp="2025-09-07T05:47:19.046Z" hostname="c82ba9db4d53" tests="28" failures="0" errors="0" skipped="0" time="0.041585152">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should make POST request with correct parameters" time="0.005596801">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should use empty object as request body" time="0.000884243">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.000598909">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should include required headers" time="0.003415269">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.000910603">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.000756991">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001557692">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.003046604">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000673069">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate axios errors" time="0.002808421">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate HTTP error responses" time="0.00066253">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle server errors" time="0.000511447">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle connection timeouts" time="0.000604498">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should support generic type parameters" time="0.000982444">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle complex response types" time="0.000707331">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle void response types" time="0.000767641">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with playlist creation endpoint" time="0.001045535">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with different Plex server URLs" time="0.001280678">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should handle different token formats" time="0.002902212">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle concurrent requests" time="0.00138426">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.001927637">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle large response payloads" time="0.000899733">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle empty token" time="0.000795891">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle special characters in URL" time="0.000583768">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle very long URLs" time="0.00065213">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should work with HTTP and HTTPS URLs" time="0.000948494">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should always send empty object as body" time="0.000842612">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.000596429">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPut.test.ts" timestamp="2025-09-07T05:47:19.052Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.061170965">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should make PUT request with correct parameters" time="0.005375328">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should use empty object as request body" time="0.001029405">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.00069858">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should include required headers" time="0.003191676">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001017394">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.00070754">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001592303">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.003221216">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000629529">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate axios errors" time="0.002973793">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate HTTP error responses" time="0.000796741">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle authorization errors" time="0.000914643">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle conflict errors" time="0.000785861">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle connection timeouts" time="0.001468272">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should support generic type parameters" time="0.00137521">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle complex response types" time="0.001950788">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle void response types" time="0.000929553">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with playlist update endpoint" time="0.001149096">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.001891267">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should handle different token formats" time="0.003610302">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle concurrent requests" time="0.001527053">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002851751">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle large response payloads" time="0.00143015">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle network retries gracefully" time="0.001148696">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle empty token" time="0.000930843">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle special characters in URL" time="0.000609648">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle very long URLs" time="0.000647749">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001024624">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.002833041">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should always send empty object as body" time="0.001107806">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.001183627">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; idempotency characteristics &gt; should be idempotent - multiple calls with same parameters" time="0.000858813">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" timestamp="2025-09-07T05:47:19.058Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.022904912">
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate strings" time="0.003745535">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate numbers" time="0.000541247">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle empty array" time="0.000632819">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle array with no duplicates" time="0.000652699">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle single element array" time="0.000466106">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle array with all same elements" time="0.000356915">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle null and undefined values" time="0.000389016">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle mixed data types" time="0.000540498">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should compare object references, not values" time="0.002254083">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should handle array of objects with same reference" time="0.000918564">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should handle large arrays efficiently" time="0.005924386">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should maintain original order of first occurrences" time="0.000592989">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should be compatible with Array.prototype.filter" time="0.000404206">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should receive correct parameters from filter" time="0.001812887">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" timestamp="2025-09-07T05:47:19.061Z" hostname="c82ba9db4d53" tests="34" failures="0" errors="0" skipped="0" time="0.037498743">
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should construct API URL with protocol, host and path" time="0.003366799">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should work with HTTPS URLs" time="0.000500277">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle paths with query parameters" time="0.000548667">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle root path" time="0.000580108">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when port is missing" time="0.00207684">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when URL has no port in hostname only format" time="0.000668209">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with explicit port numbers" time="0.000920113">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTPS port" time="0.000545338">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTP port" time="0.000478117">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle complex hostnames" time="0.001002555">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should preserve protocol from original URL" time="0.000524838">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with existing paths that get replaced" time="0.000540818">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with query parameters that get replaced" time="0.000339435">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with fragments that get replaced" time="0.000602889">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths starting with slash" time="0.000361795">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths not starting with slash" time="0.000364645">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle empty paths" time="0.000287244">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle complex paths" time="0.00212337">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths with special characters" time="0.000554408">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should throw specific error message about Roon extension" time="0.000616649">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle malformed URLs gracefully" time="0.000428566">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle invalid protocols" time="0.000556748">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with typical Plex server configurations" time="0.001061906">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with Plex API endpoints" time="0.000797872">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should handle dynamic port assignments" time="0.000638069">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve protocol exactly" time="0.000358245">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve hostname exactly" time="0.000625869">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve port exactly" time="0.000508537">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle very long paths" time="0.000239473">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle paths with Unicode characters" time="0.000380796">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle IPv6 addresses with ports" time="0.000264924">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle unusual but valid port numbers" time="0.000544258">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle many URL constructions efficiently" time="0.006322102">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle complex URLs efficiently" time="0.000348555">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" timestamp="2025-09-07T05:47:19.068Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.095885159">
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for empty expression" time="0.004437204">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for whitespace-only expression" time="0.000865073">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for single valid field" time="0.002581718">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for field with operation" time="0.002209572">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields as standalone" time="0.002532257">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields with operations" time="0.002424756">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject invalid field names" time="0.001483742">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject multiple invalid fields" time="0.000783911">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should handle mixed valid and invalid fields" time="0.00071087">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept all valid operations" time="0.003308698">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept similarity operations with valid thresholds" time="0.002146671">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject invalid operations" time="0.001604253">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject similarity operations with invalid thresholds" time="0.001017194">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle missing similarity threshold" time="0.000624959">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept AND operator" time="0.000496137">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept OR operator" time="0.000401846">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject invalid boolean operators" time="0.000459687">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle multiple boolean operators" time="0.002398485">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should be case sensitive for operators" time="0.000398566">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate balanced expressions" time="0.00138193">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should reject unbalanced expressions" time="0.000743271">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex valid expressions" time="0.000983274">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle expressions with both field:operation and standalone fields" time="0.000502448">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle multiple standalone fields" time="0.000331285">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle all standalone fields" time="0.000312555">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle parsing errors gracefully" time="0.000302354">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should return ValidationResult interface" time="0.000449257">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle very long expressions" time="0.000487467">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with extra whitespace" time="0.000492817">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with no spaces around operators" time="0.000451337">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle tabs and other whitespace characters" time="0.000420806">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle single character inputs" time="0.000464447">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only operators" time="0.002885902">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only colons" time="0.000434047">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle unicode characters" time="0.000974954">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle moderately complex expressions efficiently" time="0.000574608">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle many validation calls efficiently" time="0.045974345">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should validate real-world music search expressions" time="0.001306269">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide helpful error messages" time="0.000510097">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/compareTitles.test.ts" timestamp="2025-09-07T05:47:19.076Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.219076652">
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for undefined inputs" time="0.004438014">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when first parameter is undefined" time="0.000583819">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when second parameter is undefined" time="0.000740191">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for empty strings" time="0.000564798">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches (case insensitive)" time="0.022243962">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches with different cases" time="0.000719801">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should not match different strings" time="0.00066692">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should handle punctuation in matching" time="0.000519268">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should detect when second string contains in first (normalized)" time="0.00072171">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should not detect when first string contains in second" time="0.000551668">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should handle case insensitive contains" time="0.000435966">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should detect contains in both directions when twoWayContain is true" time="0.00072897">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should work with two-way contains for equal strings" time="0.000561329">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains for titles shorter than 5 characters" time="0.000762761">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains when second title is shorter than 5 characters" time="0.000469407">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should use contains when both titles are 5+ characters" time="0.00140745">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should handle exactly 5 character strings" time="0.000422116">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return similarity score between 0 and 1" time="0.00066458">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return higher similarity for similar strings" time="0.000496807">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return perfect similarity for identical strings" time="0.000560678">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString for contains logic" time="0.002275043">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString twice for two-way contains" time="0.001711004">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should not call createSearchString for short titles" time="0.000716681">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle music track comparisons" time="0.001679895">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle partial track matches" time="0.000874623">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle remixes and versions" time="0.00070444">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle abbreviations" time="0.000726731">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle very long titles" time="0.001692954">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle special characters" time="0.000399935">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle unicode characters" time="0.000384215">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle whitespace variations" time="0.004249271">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; performance &gt; should handle many comparisons efficiently" time="0.158392584">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/createSearchString.test.ts" timestamp="2025-09-07T05:47:19.083Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.019875028">
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should convert string to lowercase" time="0.003214016">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should trim whitespace" time="0.0006603">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle empty string" time="0.000611369">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle whitespace-only string" time="0.000476237">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; a variants &gt; should normalize à, á, â, ã, ä, å to a" time="0.000798581">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; e variants &gt; should normalize è, é, ê, ë to e" time="0.000561288">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; i variants &gt; should normalize ì, í, î, ï to i" time="0.000408286">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; o variants &gt; should normalize ò, ó, ô, õ, ö to o" time="0.000386445">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; u variants &gt; should normalize ù, ú, û, ü to u" time="0.000533907">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; y variants &gt; should normalize ý, ÿ to y" time="0.000370455">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize æ to ae" time="0.000378166">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize œ to oe" time="0.0006941">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ç to c" time="0.000363956">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ñ to n" time="0.000753251">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize music artist names" time="0.000592649">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize song titles" time="0.000540138">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should handle mixed content" time="0.000346515">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle strings with only diacritics" time="0.000250773">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle mixed case with diacritics" time="0.000296885">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle numbers and special characters" time="0.000316775">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle very long strings" time="0.000565568">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; performance &gt; should handle large strings efficiently" time="0.001760566">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should be idempotent" time="0.000334375">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should handle null/undefined gracefully" time="0.000284354">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" timestamp="2025-09-07T05:47:19.089Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.027704071">
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should convert input to lowercase" time="0.003669063">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should trim whitespace from result" time="0.00071986">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle empty string" time="0.000730841">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle whitespace-only string" time="0.00065396">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter out words when filtered=true" time="0.000381405">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should not filter out words when filtered=false" time="0.000291245">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter multiple words" time="0.000296424">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle case insensitive filtering" time="0.000393536">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle words not in filter list" time="0.000428947">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove quotes when removeQuotes=true" time="0.000362205">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should not remove quotes when removeQuotes=false" time="0.000286024">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove various quote types" time="0.000273344">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should handle multiple quote characters" time="0.000326225">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at separators when cutOffSeparators=true" time="0.000500527">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off when cutOffSeparators=false" time="0.000327285">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at last occurrence of separator" time="0.000434267">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should handle multiple separator types" time="0.000616789">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off if separator not found" time="0.002307424">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove empty brackets" time="0.000298584">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove multiple empty brackets" time="0.000243813">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should not remove non-empty brackets" time="0.000217843">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove trailing dashes" time="0.000404846">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove multiple trailing dashes" time="0.000224943">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not remove dashes from short strings" time="0.000187592">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should handle starting dashes" time="0.000188362">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not affect middle dashes" time="0.000187232">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should apply all filters when all flags are true" time="0.000274704">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should handle complex real-world examples" time="0.000256043">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should preserve order of operations" time="0.000446526">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only filtered content" time="0.000346145">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle repeated separators" time="0.002490776">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle mixed whitespace" time="0.000293324">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle very long strings" time="0.00069188">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only separators" time="0.000324955">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should call getCurrentMusicSearchConfig" time="0.00068497">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should use configuration values" time="0.000376626">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should handle empty configuration arrays" time="0.000299544">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle many filter operations efficiently" time="0.000482367">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle large filter arrays efficiently" time="0.001670604">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" timestamp="2025-09-07T05:47:19.101Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.007470348">
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; returns clean song titles" time="0.001592493">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes feat markers" time="0.000356625">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes parentheses content" time="0.000301865">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; prioritizes first occurrence" time="0.000282444">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;&quot; -&gt; &quot;&quot;" time="0.000194672">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;(&quot; -&gt; &quot;&quot;" time="0.000138592">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;feat&quot; -&gt; &quot;&quot;" time="0.000206313">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;a&quot; -&gt; &quot;a&quot;" time="0.000135082">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; removes from first &quot;feat&quot; occurrence" time="0.000289464">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles case sensitivity" time="0.000315164">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; ignores closing parenthesis only" time="0.000158893">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; error handling &gt; handles null and undefined inputs" time="0.001114226">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Despacito feat. Justin Bieber&quot;" time="0.000169163">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Bohemian Rhapsody (Live Aid 1985)&quot;" time="0.000346625">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/api/index.test.ts" timestamp="2025-09-07T05:47:19.106Z" hostname="c82ba9db4d53" tests="2" failures="0" errors="0" skipped="0" time="0.013233532">
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should create mock request and response objects" time="0.007764832">
        </testcase>
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should verify response helper works" time="0.00279239">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/hooks/useDualModeEditor.test.ts" timestamp="2025-09-07T05:47:19.107Z" hostname="c82ba9db4d53" tests="3" failures="0" errors="0" skipped="0" time="0.035720817">
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should initialize with default state" time="0.021669794">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should switch view modes" time="0.006645616">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should update data when changed" time="0.004295712">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/pages/index.test.tsx" timestamp="2025-09-07T05:47:19.109Z" hostname="c82ba9db4d53" tests="27" failures="0" errors="0" skipped="0" time="3.410973539">
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render loading state initially" time="0.106290319">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render without crashing" time="0.027478547">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection component when not connected" time="0.061914947">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection when connected but no URI" time="0.027825423">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should show main content when connected with URI" time="0.287747557">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render all menu items" time="0.154266494">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render menu items as clickable cards" time="0.098951183">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render Plex Settings button" time="0.097650074">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should open Plex settings dialog when button is clicked" time="0.238742927">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should close Plex settings dialog when close button is clicked" time="0.263618917">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex query parameter on router ready" time="0.127176671">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle successful plex verification" time="0.17132522">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should not process plex query when router is not ready" time="0.029620369">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex verification failure" time="0.032551722">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle settings API error gracefully" time="0.020847352">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle auth verification error" time="0.022502535">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should update state when connection is established through PlexConnection" time="0.200503183">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should handle loading state changes correctly" time="0.099881846">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnection" time="0.025412378">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnectionDialog" time="0.138867781">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have proper page title" time="0.017858648">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible navigation links" time="0.13054454">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible button for Plex settings" time="0.086692625">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible dialog when opened" time="0.146088315">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle multiple rapid state changes" time="0.74867155">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should cleanup properly on unmount" time="0.020517807">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle component re-renders without unnecessary API calls" time="0.019195298">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" timestamp="2025-09-07T05:47:19.116Z" hostname="c82ba9db4d53" tests="7" failures="0" errors="0" skipped="0" time="0.679727902">
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should render without crashing" time="0.054482949">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should not display confirmation dialog initially" time="0.013416884">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display confirmation dialog when triggered" time="0.257169704">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should work with exported confirm function" time="0.06488599">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display custom confirmation text" time="0.062359093">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when confirm button is clicked" time="0.114136893">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when cancel button is clicked" time="0.110174695">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" timestamp="2025-09-07T05:47:19.118Z" hostname="c82ba9db4d53" tests="25" failures="0" errors="0" skipped="0" time="0.702997929">
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without crashing" time="0.050122336">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render with children" time="0.015162389">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render multiple children" time="0.015353573">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without children" time="0.009110832">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should apply HTML attributes correctly" time="0.012248647">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle click events" time="0.015091449">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle mouse events" time="0.01175023">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle keyboard events" time="0.013950792">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should have Material-UI Paper base styling" time="0.009923603">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should apply custom margin top styling" time="0.086297879">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should merge with additional sx props when provided" time="0.019859497">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should be keyboard accessible when tabIndex is provided" time="0.017593955">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support ARIA attributes" time="0.011798401">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support screen reader content" time="0.010877348">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render text content" time="0.008425712">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render React elements" time="0.008958">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render arrays of elements" time="0.009795812">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle conditional rendering" time="0.009594499">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle complex nested content" time="0.023248887">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle null children gracefully" time="0.009440786">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle empty string children" time="0.007001341">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle numeric children" time="0.009083141">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle mixed content types" time="0.011051">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should not re-render unnecessarily with same props" time="0.015542635">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should handle large amounts of content efficiently" time="0.287424332">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" timestamp="2025-09-07T05:47:19.125Z" hostname="c82ba9db4d53" tests="33" failures="0" errors="0" skipped="0" time="2.805680505">
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render without crashing" time="0.160299101">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should display the correct title" time="0.053789288">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render all action buttons" time="0.031494086">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render view mode toggle buttons" time="0.032620463">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render icons within buttons" time="0.033543556">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show UI mode as selected by default" time="0.029147632">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show JSON mode as selected when specified" time="0.032953297">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when UI mode is clicked" time="0.278388241">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when JSON mode is clicked" time="0.073726617">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should handle clicking the same mode button" time="0.102713547">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should be exclusive selection (only one mode selected at a time)" time="0.040980603">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onReset when reset button is clicked" time="0.110796684">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onSave when save button is clicked" time="0.083086293">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should handle multiple rapid clicks on action buttons" time="0.144222108">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should support keyboard interaction on action buttons" time="0.114377526">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should disable all interactive elements when disabled prop is true" time="0.036486729">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is false" time="0.037790817">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is undefined" time="0.042711538">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should not trigger callbacks when buttons are disabled" time="0.04009085">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have proper layout structure" time="0.04214964">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should apply proper button variants and sizes" time="0.025422938">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have divider between toggle buttons and action buttons" time="0.023228786">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have proper ARIA attributes" time="0.028876308">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should be keyboard navigable" time="0.037227539">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have appropriate button labels" time="0.035707247">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should indicate selected state for view mode buttons" time="0.063319756">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle empty title gracefully" time="0.031149941">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle very long titles" time="0.042935852">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle null callback functions gracefully" time="0.076205493">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle rapid view mode changes" time="0.369599431">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should maintain state consistency during re-renders" time="0.057936949">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should not cause unnecessary re-renders with same props" time="0.035073158">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should handle high frequency interactions efficiently" time="0.452271478">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" timestamp="2025-09-07T05:47:19.132Z" hostname="c82ba9db4d53" tests="4" failures="0" errors="0" skipped="0" time="0.254695998">
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should render without crashing" time="0.159275557">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should display JSON value" time="0.025614101">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle valid JSON changes" time="0.04072923">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle null value gracefully" time="0.025036963">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" timestamp="2025-09-07T05:47:19.133Z" hostname="c82ba9db4d53" tests="19" failures="0" errors="0" skipped="0" time="1.5304187">
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should provide showError function through context" time="0.043145825">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should not display error dialog initially" time="0.015258411">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via context" time="0.224008483">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via export" time="0.061113544">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display stack trace when provided" time="0.169251341">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should not display stack trace section when stack trace is same as error message" time="0.066588694">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when Escape key is pressed" time="0.073799709">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when close button is clicked" time="0.124596984">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should focus close button when dialog opens" time="0.080919552">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle empty error message gracefully" time="0.026898779">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle long error messages" time="0.058775211">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle special characters in error messages" time="0.07804208">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should have proper ARIA attributes" time="0.115625184">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should trap focus within the dialog" time="0.095890209">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should cleanup properly on unmount" time="0.031926583">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle multiple error triggers correctly" time="0.092474529">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle rapid error triggers" time="0.054399787">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should display dialog with correct title" time="0.052779275">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should have full width and small max width" time="0.061111725">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" timestamp="2025-09-07T05:47:19.136Z" hostname="c82ba9db4d53" tests="20" failures="0" errors="0" skipped="0" time="1.828149041">
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should render loading state initially" time="0.226926415">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should load data on mount" time="0.037737116">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should start in UI mode by default" time="0.150269965">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should switch between UI and JSON modes" time="0.120625636">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should convert data when switching modes" time="0.099524331">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate filter expressions correctly" time="0.081011473">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should accept valid filter expressions" time="0.08081466">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate array structure" time="0.084181868">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should save filters successfully" time="0.050586003">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should reset filters to original data" time="0.079738975">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should not reset if user cancels confirmation" time="0.041342299">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should display error for invalid JSON syntax" time="0.090292798">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should clear validation errors when switching modes" time="0.106126087">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should display filters in UI mode" time="0.015954571">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should update filters in UI mode" time="0.065359496">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Loading States &gt; should disable controls during loading" time="0.118873071">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle keyboard shortcuts in JSON mode" time="0.103655931">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle tab navigation between controls" time="0.052373688">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API load errors gracefully" time="0.147850351">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API save errors gracefully" time="0.070499581">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" timestamp="2025-09-07T05:47:19.140Z" hostname="c82ba9db4d53" tests="38" failures="0" errors="0" skipped="0" time="1.950987269">
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with empty state when no value provided" time="0.070599832">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with custom placeholder" time="0.022033039">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should parse existing expression into pills" time="0.055319561">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should handle disabled state" time="0.02345658">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse simple field expressions" time="0.12358348">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse complex expressions with combinators" time="0.021682094">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle incomplete expressions" time="0.038592019">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle similarity expressions with thresholds" time="0.013662568">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle invalid expressions gracefully" time="0.014239186">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should open field selector when add pill is clicked" time="0.111576686">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add field when selected from popup" time="0.091702048">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add AND combinator when adding second field" time="0.080543026">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should not open selector when disabled" time="0.034842904">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should open operation selector when field pill is clicked" time="0.037960469">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should update operation when selected from popup" time="0.072339047">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should handle similarity operation with threshold" time="0.080039679">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should show current operation in popup" time="0.038368895">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should not open operation selector when disabled" time="0.045277286">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should delete pill when delete button is clicked in operation popup" time="0.074047092">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should remove combinator when deleting condition pill" time="0.083409717">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should handle deletion of middle pill in complex expression" time="0.075053217">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle escape key to close popups" time="0.072767354">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle tab navigation through pills" time="0.090033973">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle enter key to activate pills" time="0.026393602">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle completely invalid expression" time="0.00899705">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle mixed valid and invalid tokens" time="0.014988447">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle empty field values gracefully" time="0.009048431">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close field selector when close button is clicked" time="0.061171505">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close operation selector when close button is clicked" time="0.05251455">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close popups when clicking outside" time="0.056089322">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with small size" time="0.008077347">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with medium size" time="0.01105992">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should have proper ARIA attributes" time="0.010451722">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should announce pill configuration state" time="0.03173782">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should support keyboard navigation" time="0.049931383">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should call onChange with updated expression when pills change" time="0.077545623">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should preserve other pills when updating one pill" time="0.08016049">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should handle rapid updates without conflicts" time="0.07530719">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8uvhdpzdfbo&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8uvhdpzdfbo&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
