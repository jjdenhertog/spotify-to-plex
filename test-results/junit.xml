<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="608" failures="0" errors="0" time="19.17309704">
    <testsuite name="packages/http-client/src/__tests__/AxiosRequest.test.ts" timestamp="2025-09-07T10:01:37.832Z" hostname="c82ba9db4d53" tests="21" failures="0" errors="0" skipped="0" time="0.031598639">
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should have all HTTP methods" time="0.004515984">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should map to correct method functions" time="0.001102196">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate GET requests correctly" time="0.004077628">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate POST requests correctly" time="0.000797811">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate PUT requests correctly" time="0.000864392">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate DELETE requests correctly" time="0.000751001">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate GET errors" time="0.003462679">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate POST errors" time="0.000788311">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate PUT errors" time="0.000908323">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate DELETE errors" time="0.000775691">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for GET" time="0.000902663">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for POST" time="0.000531177">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for PUT" time="0.000641249">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for DELETE" time="0.000871522">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should support chaining and method calls" time="0.000907083">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should handle concurrent requests" time="0.001514251">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should provide consistent interface across all methods" time="0.000544187">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should maintain object structure" time="0.001797805">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should be extensible" time="0.000679009">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should be the default export of the module" time="0.000447436">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should not expose internal implementation details" time="0.000719161">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" timestamp="2025-09-07T10:01:37.847Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.054799498">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should make DELETE request with correct parameters" time="0.008242287">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.004562645">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should include required headers" time="0.001870396">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001270378">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.000868752">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate axios errors" time="0.008196096">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate HTTP error responses" time="0.000984294">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle authorization errors" time="0.001104366">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle not found errors" time="0.001132896">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle connection timeouts" time="0.001165376">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should support generic type parameters" time="0.001110426">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle complex response types" time="0.000804302">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle void response types" time="0.00074793">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with playlist deletion endpoint" time="0.001719854">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.002326083">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should handle different token formats" time="0.003291707">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle concurrent requests" time="0.002322643">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002387734">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle network retries gracefully" time="0.000996324">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle empty token" time="0.001304348">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle special characters in URL" time="0.000898583">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle very long URLs" time="0.000877462">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001105716">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.001466551">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosGet.test.ts" timestamp="2025-09-07T10:01:37.860Z" hostname="c82ba9db4d53" tests="22" failures="0" errors="0" skipped="0" time="0.080216839">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should make GET request with correct parameters" time="0.009224791">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use default timeout of 10 seconds" time="0.005210964">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.002733429">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom config with defaults" time="0.001741465">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should allow custom timeout to override default" time="0.001530661">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom headers with Plex token header" time="0.001571092">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should not allow custom headers to override Plex token" time="0.001853347">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should preserve httpsAgent from default configuration" time="0.001660544">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate axios errors" time="0.004822129">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate HTTP error responses" time="0.002454564">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should handle timeout errors" time="0.001219247">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should support generic type parameters" time="0.001211157">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should handle complex response types" time="0.022659961">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should always include X-Plex-Token header" time="0.001526031">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should handle different token formats" time="0.003024063">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should work with different Plex API endpoints" time="0.001713064">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle concurrent requests" time="0.001479961">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle large response data" time="0.005202104">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.001991889">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle empty token" time="0.001139886">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle very long URLs" time="0.000826622">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle special characters in URL" time="0.000814232">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPost.test.ts" timestamp="2025-09-07T10:01:37.874Z" hostname="c82ba9db4d53" tests="28" failures="0" errors="0" skipped="0" time="0.073646026">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should make POST request with correct parameters" time="0.010506829">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should use empty object as request body" time="0.001575422">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001092085">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should include required headers" time="0.005470558">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.003912655">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.001081535">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.004343561">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.00073338">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000894892">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate axios errors" time="0.00422424">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate HTTP error responses" time="0.001203337">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle server errors" time="0.000923894">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle connection timeouts" time="0.001060645">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should support generic type parameters" time="0.001522291">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle complex response types" time="0.001038694">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle void response types" time="0.00561254">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with playlist creation endpoint" time="0.001362449">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with different Plex server URLs" time="0.003019323">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should handle different token formats" time="0.003331997">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle concurrent requests" time="0.001899727">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.00355709">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle large response payloads" time="0.00143903">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle empty token" time="0.001464">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle special characters in URL" time="0.003282726">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle very long URLs" time="0.000762481">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should work with HTTP and HTTPS URLs" time="0.001000954">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should always send empty object as body" time="0.001315969">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.000812191">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPut.test.ts" timestamp="2025-09-07T10:01:37.886Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.068732736">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should make PUT request with correct parameters" time="0.008405439">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should use empty object as request body" time="0.005822483">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001014025">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should include required headers" time="0.004823329">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001561952">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.005780262">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.002242281">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.000673669">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.00074971">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate axios errors" time="0.003982257">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate HTTP error responses" time="0.001067075">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle authorization errors" time="0.000870333">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle conflict errors" time="0.000766071">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle connection timeouts" time="0.001455331">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should support generic type parameters" time="0.001105176">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle complex response types" time="0.001806486">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle void response types" time="0.000876883">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with playlist update endpoint" time="0.001043545">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.003030873">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should handle different token formats" time="0.002402344">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle concurrent requests" time="0.001259078">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002151441">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle large response payloads" time="0.001146756">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle network retries gracefully" time="0.001062085">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle empty token" time="0.000946433">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle special characters in URL" time="0.000767411">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle very long URLs" time="0.000923843">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001296889">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.001322339">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should always send empty object as body" time="0.001307269">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.001226507">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; idempotency characteristics &gt; should be idempotent - multiple calls with same parameters" time="0.001016484">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" timestamp="2025-09-07T10:01:37.907Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.033309933">
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate strings" time="0.003899905">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate numbers" time="0.000416756">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle empty array" time="0.000474637">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle array with no duplicates" time="0.000460987">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle single element array" time="0.000459946">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle array with all same elements" time="0.000366285">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle null and undefined values" time="0.000423236">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle mixed data types" time="0.000570068">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should compare object references, not values" time="0.002392674">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should handle array of objects with same reference" time="0.000926043">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should handle large arrays efficiently" time="0.016621676">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should maintain original order of first occurrences" time="0.000530987">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should be compatible with Array.prototype.filter" time="0.000353335">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should receive correct parameters from filter" time="0.001485071">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" timestamp="2025-09-07T10:01:37.913Z" hostname="c82ba9db4d53" tests="34" failures="0" errors="0" skipped="0" time="0.037646915">
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should construct API URL with protocol, host and path" time="0.003070994">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should work with HTTPS URLs" time="0.000512077">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle paths with query parameters" time="0.000599149">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle root path" time="0.000595019">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when port is missing" time="0.003087904">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when URL has no port in hostname only format" time="0.000562798">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with explicit port numbers" time="0.000799992">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTPS port" time="0.000508517">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTP port" time="0.000484116">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle complex hostnames" time="0.001036585">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should preserve protocol from original URL" time="0.000454087">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with existing paths that get replaced" time="0.000470217">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with query parameters that get replaced" time="0.000288874">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with fragments that get replaced" time="0.000619189">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths starting with slash" time="0.000359955">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths not starting with slash" time="0.000391706">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle empty paths" time="0.000276454">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle complex paths" time="0.000719331">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths with special characters" time="0.000428346">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should throw specific error message about Roon extension" time="0.000498997">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle malformed URLs gracefully" time="0.000469487">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle invalid protocols" time="0.000736201">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with typical Plex server configurations" time="0.001217557">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with Plex API endpoints" time="0.000884802">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should handle dynamic port assignments" time="0.000682719">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve protocol exactly" time="0.000392965">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve hostname exactly" time="0.000671319">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve port exactly" time="0.000590368">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle very long paths" time="0.000279604">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle paths with Unicode characters" time="0.000316674">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle IPv6 addresses with ports" time="0.000241894">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle unusual but valid port numbers" time="0.000410346">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle many URL constructions efficiently" time="0.01055709">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle complex URLs efficiently" time="0.000356525">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" timestamp="2025-09-07T10:01:37.937Z" hostname="c82ba9db4d53" tests="66" failures="0" errors="0" skipped="0" time="0.206442632">
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for empty expression" time="0.005234285">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for whitespace-only expression" time="0.000951983">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for single valid field" time="0.00281416">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for field with operation" time="0.001577343">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields as standalone" time="0.003193556">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields with operations" time="0.002570067">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject invalid field names" time="0.001741025">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject multiple invalid fields" time="0.000851533">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should handle mixed valid and invalid fields" time="0.000790721">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept all valid operations" time="0.002026919">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle operation regex pattern with special characters" time="0.001996779">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject operations with invalid characters" time="0.003228546">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept similarity operations with valid thresholds" time="0.002220802">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle boundary values for similarity thresholds" time="0.001758655">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should validate exact similarity threshold error messages" time="0.004140539">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle similarity operations with malformed syntax" time="0.001018924">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject invalid operations" time="0.00069179">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject similarity operations with invalid thresholds" time="0.004756308">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle missing similarity threshold" time="0.000521798">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept AND operator" time="0.00067954">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept OR operator" time="0.000526307">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject invalid boolean operators" time="0.000464387">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject all invalid boolean operators comprehensively" time="0.001466581">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle mixed case invalid operators" time="0.000740181">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should detect multiple invalid operators in single expression" time="0.000473347">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle multiple boolean operators" time="0.001233248">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should be case sensitive for operators" time="0.003278046">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate balanced expressions" time="0.001363819">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate operator-to-condition ratio precisely" time="0.001800916">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex nested logical patterns" time="0.001150716">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should reject unbalanced expressions" time="0.000788161">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex valid expressions" time="0.000977774">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle expressions with both field:operation and standalone fields" time="0.000460176">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle multiple standalone fields" time="0.000432306">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle all standalone fields" time="0.000520637">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle parsing errors gracefully" time="0.000549728">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should return ValidationResult interface" time="0.00077017">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle very long expressions" time="0.00070524">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with extra whitespace" time="0.000524777">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with no spaces around operators" time="0.000490687">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle tabs and other whitespace characters" time="0.000451546">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle single character inputs" time="0.000419326">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle field extraction edge cases" time="0.000805572">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle regex special characters in field context" time="0.001089255">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should validate exact syntax pattern matching" time="0.000667199">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only operators" time="0.000432317">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only colons" time="0.000440766">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle unicode characters" time="0.001251157">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle extremely malformed expressions" time="0.00284711">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should maintain consistent validation result structure" time="0.003811954">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle moderately complex expressions efficiently" time="0.00065672">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle many validation calls efficiently" time="0.047618226">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle deeply nested validation without performance degradation" time="0.000971474">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should validate real-world music search expressions" time="0.004431673">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should handle all valid field combinations with all operations" time="0.004544384">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide specific error messages for each validation failure" time="0.007649808">
            <system-out>
Expression &quot;artist:match AND&quot; failed validation with errors: [
  [32m&apos;Invalid expression syntax. Expected format: &quot;field[:operation] AND/OR field[:operation]&quot;&apos;[39m
]

            </system-out>
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide helpful error messages" time="0.000590378">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should handle potential ReDoS (Regular Expression Denial of Service) patterns" time="0.004543894">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should sanitize and handle injection-like patterns safely" time="0.001061125">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should handle extremely large expressions without memory issues" time="0.002648958">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should provide clear and actionable error messages" time="0.000863882">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should provide multiple specific errors for expressions with multiple issues" time="0.000918194">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should prioritize validation errors appropriately" time="0.000535447">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should return identical results for identical inputs" time="0.00352163">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should handle concurrent validations consistently" time="0.032620773">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should maintain validation behavior across different input encodings" time="0.001075016">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/functions/parseExpression.test.ts" timestamp="2025-09-07T10:01:37.961Z" hostname="c82ba9db4d53" tests="60" failures="0" errors="0" skipped="0" time="0.120727905">
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should return a function when given a valid expression" time="0.006981939">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should return a function that always returns false for invalid expressions" time="0.003205676">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should handle empty expressions gracefully" time="0.000875863">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artist match" time="0.000930313">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by title match" time="0.000877533">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by album match" time="0.000896343">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artistWithTitle match" time="0.00066351">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artistInTitle match" time="0.000785441">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; contains operation &gt; should filter by artist contains" time="0.000792461">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; contains operation &gt; should filter by title contains" time="0.000641929">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; is operation (exact match) &gt; should filter by exact match (both match and contains)" time="0.000993944">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; not operation (negation) &gt; should filter by negated match" time="0.000582418">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should filter by similarity threshold" time="0.000977934">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should handle different similarity thresholds" time="0.001084025">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should handle missing similarity values" time="0.000612949">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle simple AND expressions" time="0.000970924">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle multiple AND operations" time="0.000599848">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle mixed operations with AND" time="0.00070835">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; OR operations &gt; should handle simple OR expressions" time="0.00073431">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; OR operations &gt; should handle multiple OR operations" time="0.000818211">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; mixed AND/OR operations &gt; should handle combined AND/OR expressions (left-to-right evaluation)" time="0.000640789">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; mixed AND/OR operations &gt; should handle complex mixed expressions" time="0.000671959">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid field names" time="0.005178994">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid operations" time="0.00494967">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid similarity thresholds" time="0.001506702">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle malformed condition format" time="0.001671794">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid operators" time="0.000474117">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle expressions with only operators" time="0.000418666">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with extra whitespace" time="0.000343185">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle case sensitivity in operators" time="0.000511997">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with missing fields" time="0.000327355">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle boundary similarity values" time="0.000601719">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with no valid conditions" time="0.000494137">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle extremely long expressions" time="0.000754351">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle decimal precision in similarity thresholds" time="0.000462217">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; real-world scenarios &gt; should handle typical music search patterns" time="0.002527376">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; real-world scenarios &gt; should handle high-precision matching requirements" time="0.000525038">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; performance &gt; should handle many evaluations efficiently" time="0.02177404">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist match AND title match" time="0.006961929">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist match AND title contains" time="0.001277518">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist contains AND title match" time="0.002528316">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist similarity with threshold" time="0.001734454">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist match AND title similarity" time="0.001064415">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist contains AND title similarity" time="0.001960258">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate dual similarity thresholds" time="0.001338899">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; complex patterns &gt; should migrate triple condition with album" time="0.001290808">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; complex patterns &gt; should migrate complex similarity with match pattern" time="0.001321679">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; exact match patterns (is operation) &gt; should migrate artist exact match" time="0.00069503">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; exact match patterns (is operation) &gt; should migrate title exact match" time="0.000533758">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should migrate artist not match" time="0.000492387">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should migrate title not match" time="0.000316305">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should handle complex negation patterns (current implementation behavior)" time="0.000339115">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; format variations &gt; should handle different function wrapper formats" time="0.000641079">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; format variations &gt; should handle extra whitespace" time="0.000333255">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; decimal precision in legacy filters &gt; should migrate artistWithTitle similarity patterns" time="0.000291874">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; decimal precision in legacy filters &gt; should handle integer thresholds" time="0.000313835">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should return null for unrecognized patterns" time="0.000484747">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should return null for malformed input" time="0.00069408">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should handle errors gracefully" time="0.003016953">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; comprehensive migration test &gt; should migrate all supported patterns correctly" time="0.004366612">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/compareTitles.test.ts" timestamp="2025-09-07T10:01:37.984Z" hostname="c82ba9db4d53" tests="52" failures="0" errors="0" skipped="0" time="0.321833921">
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for undefined inputs" time="0.004391062">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when first parameter is undefined" time="0.000574608">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when second parameter is undefined" time="0.0006946">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for empty strings" time="0.000529207">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches (case insensitive)" time="0.026180661">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches with different cases" time="0.00067989">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should not match different strings" time="0.000480937">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should handle punctuation in matching" time="0.000418766">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should detect when second string contains in first (normalized)" time="0.000750391">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should not detect when first string contains in second" time="0.000570118">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should handle case insensitive contains" time="0.000407206">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should detect contains in both directions when twoWayContain is true" time="0.00069511">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should work with two-way contains for equal strings" time="0.000512057">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains for titles shorter than 5 characters" time="0.00072001">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains when second title is shorter than 5 characters" time="0.000444587">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should use contains when both titles are 5+ characters" time="0.000467957">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should handle exactly 5 character strings" time="0.000375855">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return similarity score between 0 and 1" time="0.000563568">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return higher similarity for similar strings" time="0.000428116">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return perfect similarity for identical strings" time="0.000483937">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString for contains logic" time="0.002116">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString twice for two-way contains" time="0.000508768">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should not call createSearchString for short titles" time="0.000595429">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should detect reverse containment when shorter string is &gt;=50% of longer string length" time="0.000481517">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should handle exact 50% ratio boundary" time="0.000438847">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should only apply reverse containment when first string is shorter" time="0.000309844">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should not apply reverse containment when standard containment already found" time="0.000304584">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should handle complex remix scenarios" time="0.000926603">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should handle exactly 5-char first string with 4-char second string" time="0.000360255">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should handle exactly 5-char first string with 4-char second string that does not match" time="0.000374706">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should not apply boundary case when first string is not exactly 5 chars" time="0.000393575">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should not apply boundary case when second string is not exactly 4 chars" time="0.003731493">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle null and undefined mixed scenarios" time="0.001283748">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle empty and whitespace-only strings" time="0.001083646">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle strings with only punctuation" time="0.000549868">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle mixed case with whitespace trimming" time="0.000357705">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle boundary lengths around 5-character threshold" time="0.000715481">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should handle strings that are similar but not exact matches" time="0.000821842">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should handle international characters correctly" time="0.00140468">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should calculate different similarity scores for different inputs" time="0.0007242">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; two-way containment comprehensive testing &gt; should work bidirectionally for all valid combinations" time="0.00073794">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; two-way containment comprehensive testing &gt; should respect 5-character minimum in two-way mode" time="0.000530177">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle music track comparisons" time="0.000772621">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle partial track matches" time="0.000609929">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle remixes and versions" time="0.000634869">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle abbreviations" time="0.000575599">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle common music industry patterns" time="0.001276428">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle very long titles" time="0.003411089">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle special characters" time="0.000402726">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle unicode characters" time="0.000318554">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle whitespace variations" time="0.000330744">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; performance &gt; should handle many comparisons efficiently" time="0.240712229">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/createSearchString.test.ts" timestamp="2025-09-07T10:01:37.999Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.025114687">
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should convert string to lowercase" time="0.004046987">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should trim whitespace" time="0.000829582">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle empty string" time="0.001001635">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle whitespace-only string" time="0.000610749">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; a variants &gt; should normalize à, á, â, ã, ä, å to a" time="0.001030305">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; e variants &gt; should normalize è, é, ê, ë to e" time="0.00070945">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; i variants &gt; should normalize ì, í, î, ï to i" time="0.000394435">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; o variants &gt; should normalize ò, ó, ô, õ, ö to o" time="0.000552367">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; u variants &gt; should normalize ù, ú, û, ü to u" time="0.000636159">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; y variants &gt; should normalize ý, ÿ to y" time="0.000387565">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize æ to ae" time="0.000417796">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize œ to oe" time="0.000732461">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ç to c" time="0.000510917">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ñ to n" time="0.000842032">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize music artist names" time="0.0006799">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize song titles" time="0.000618149">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should handle mixed content" time="0.000395846">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle strings with only diacritics" time="0.000303184">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle mixed case with diacritics" time="0.000373705">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle numbers and special characters" time="0.000365246">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle very long strings" time="0.000619589">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; performance &gt; should handle large strings efficiently" time="0.001930467">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should be idempotent" time="0.000392925">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should handle null/undefined gracefully" time="0.000329224">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" timestamp="2025-09-07T10:01:38.005Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.042523663">
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should convert input to lowercase" time="0.004296871">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should trim whitespace from result" time="0.000634539">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle empty string" time="0.000762381">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle whitespace-only string" time="0.000787721">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter out words when filtered=true" time="0.000554028">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should not filter out words when filtered=false" time="0.000865233">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter multiple words" time="0.000459516">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle case insensitive filtering" time="0.000579348">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle words not in filter list" time="0.002529166">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove quotes when removeQuotes=true" time="0.000439056">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should not remove quotes when removeQuotes=false" time="0.000276434">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove various quote types" time="0.000317345">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should handle multiple quote characters" time="0.000351645">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at separators when cutOffSeparators=true" time="0.000543848">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off when cutOffSeparators=false" time="0.000306004">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at last occurrence of separator" time="0.000241063">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should handle multiple separator types" time="0.000391246">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off if separator not found" time="0.000292854">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove empty brackets" time="0.000236944">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove multiple empty brackets" time="0.000354065">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should not remove non-empty brackets" time="0.000310384">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove trailing dashes" time="0.000482667">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove multiple trailing dashes" time="0.001839446">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not remove dashes from short strings" time="0.000358545">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should handle starting dashes" time="0.000347405">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not affect middle dashes" time="0.002585817">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should apply all filters when all flags are true" time="0.000446866">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should handle complex real-world examples" time="0.000389215">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should preserve order of operations" time="0.000513917">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only filtered content" time="0.000423616">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle repeated separators" time="0.000339485">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle mixed whitespace" time="0.000367995">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle very long strings" time="0.000903273">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only separators" time="0.000380466">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should call getCurrentMusicSearchConfig" time="0.004370522">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should use configuration values" time="0.000419506">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should handle empty configuration arrays" time="0.000398166">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle many filter operations efficiently" time="0.000547018">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle large filter arrays efficiently" time="0.006487923">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" timestamp="2025-09-07T10:01:38.013Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.011603355">
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; returns clean song titles" time="0.002319713">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes feat markers" time="0.000551927">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes parentheses content" time="0.000476456">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; prioritizes first occurrence" time="0.000425936">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;&quot; -&gt; &quot;&quot;" time="0.000290565">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;(&quot; -&gt; &quot;&quot;" time="0.000203813">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;feat&quot; -&gt; &quot;&quot;" time="0.000311094">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;a&quot; -&gt; &quot;a&quot;" time="0.000215853">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; removes from first &quot;feat&quot; occurrence" time="0.000439666">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles case sensitivity" time="0.000516837">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; ignores closing parenthesis only" time="0.000246534">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; error handling &gt; handles null and undefined inputs" time="0.001788155">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Despacito feat. Justin Bieber&quot;" time="0.000273934">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Bohemian Rhapsody (Live Aid 1985)&quot;" time="0.000525037">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/pages/index.test.tsx" timestamp="2025-09-07T10:01:38.016Z" hostname="c82ba9db4d53" tests="27" failures="0" errors="0" skipped="0" time="4.813298546">
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render loading state initially" time="0.099693111">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render without crashing" time="0.021337732">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection component when not connected" time="0.044162925">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection when connected but no URI" time="0.03035054">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should show main content when connected with URI" time="0.385405464">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render all menu items" time="0.152938214">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render menu items as clickable cards" time="0.124956708">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render Plex Settings button" time="0.126583621">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should open Plex settings dialog when button is clicked" time="0.272358514">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should close Plex settings dialog when close button is clicked" time="0.326578482">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex query parameter on router ready" time="0.202250782">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle successful plex verification" time="0.190994204">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should not process plex query when router is not ready" time="0.031841911">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex verification failure" time="0.050555625">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle settings API error gracefully" time="0.021598726">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle auth verification error" time="0.023474372">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should update state when connection is established through PlexConnection" time="0.16206439">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should handle loading state changes correctly" time="0.136343967">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnection" time="0.030669085">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnectionDialog" time="0.227236497">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have proper page title" time="0.020542002">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible navigation links" time="0.162211694">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible button for Plex settings" time="0.147438744">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible dialog when opened" time="0.350462507">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle multiple rapid state changes" time="1.309710943">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should cleanup properly on unmount" time="0.075423942">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle component re-renders without unnecessary API calls" time="0.075855227">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/hooks/useDualModeEditor.test.ts" timestamp="2025-09-07T10:01:38.022Z" hostname="c82ba9db4d53" tests="3" failures="0" errors="0" skipped="0" time="0.052670448">
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should initialize with default state" time="0.033713759">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should switch view modes" time="0.010485649">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should update data when changed" time="0.004629576">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/api/index.test.ts" timestamp="2025-09-07T10:01:38.023Z" hostname="c82ba9db4d53" tests="2" failures="0" errors="0" skipped="0" time="0.017235334">
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should create mock request and response objects" time="0.009662008">
        </testcase>
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should verify response helper works" time="0.00353194">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" timestamp="2025-09-07T10:01:38.024Z" hostname="c82ba9db4d53" tests="7" failures="0" errors="0" skipped="0" time="0.916047945">
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should render without crashing" time="0.061758294">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should not display confirmation dialog initially" time="0.014243162">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display confirmation dialog when triggered" time="0.35612262">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should work with exported confirm function" time="0.078648793">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display custom confirmation text" time="0.094415896">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when confirm button is clicked" time="0.175651746">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when cancel button is clicked" time="0.130847872">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" timestamp="2025-09-07T10:01:38.025Z" hostname="c82ba9db4d53" tests="25" failures="0" errors="0" skipped="0" time="1.012406238">
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without crashing" time="0.068980737">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render with children" time="0.02264543">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render multiple children" time="0.025085295">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without children" time="0.010485198">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should apply HTML attributes correctly" time="0.023227529">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle click events" time="0.035850138">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle mouse events" time="0.029103492">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle keyboard events" time="0.022182234">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should have Material-UI Paper base styling" time="0.01841081">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should apply custom margin top styling" time="0.125151281">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should merge with additional sx props when provided" time="0.032869226">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should be keyboard accessible when tabIndex is provided" time="0.03182535">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support ARIA attributes" time="0.016306451">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support screen reader content" time="0.011851678">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render text content" time="0.012432046">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render React elements" time="0.011610494">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render arrays of elements" time="0.011643075">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle conditional rendering" time="0.027713552">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle complex nested content" time="0.02051295">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle null children gracefully" time="0.016337291">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle empty string children" time="0.012462316">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle numeric children" time="0.012387465">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle mixed content types" time="0.018605063">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should not re-render unnecessarily with same props" time="0.018865957">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should handle large amounts of content efficiently" time="0.371194704">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" timestamp="2025-09-07T10:01:38.030Z" hostname="c82ba9db4d53" tests="4" failures="0" errors="0" skipped="0" time="0.270904904">
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should render without crashing" time="0.158341251">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should display JSON value" time="0.024591258">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle valid JSON changes" time="0.039706282">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle null value gracefully" time="0.044782424">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" timestamp="2025-09-07T10:01:38.032Z" hostname="c82ba9db4d53" tests="33" failures="0" errors="0" skipped="0" time="3.637193914">
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render without crashing" time="0.261114145">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should display the correct title" time="0.050290372">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render all action buttons" time="0.045134829">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render view mode toggle buttons" time="0.042199437">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render icons within buttons" time="0.102819355">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show UI mode as selected by default" time="0.034342456">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show JSON mode as selected when specified" time="0.046002031">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when UI mode is clicked" time="0.290567413">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when JSON mode is clicked" time="0.108906602">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should handle clicking the same mode button" time="0.133740643">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should be exclusive selection (only one mode selected at a time)" time="0.099017471">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onReset when reset button is clicked" time="0.127298881">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onSave when save button is clicked" time="0.083173867">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should handle multiple rapid clicks on action buttons" time="0.210240116">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should support keyboard interaction on action buttons" time="0.077137702">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should disable all interactive elements when disabled prop is true" time="0.047525893">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is false" time="0.031134571">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is undefined" time="0.030889218">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should not trigger callbacks when buttons are disabled" time="0.06780789">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have proper layout structure" time="0.056164748">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should apply proper button variants and sizes" time="0.056128017">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have divider between toggle buttons and action buttons" time="0.042834408">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have proper ARIA attributes" time="0.032235178">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should be keyboard navigable" time="0.059593786">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have appropriate button labels" time="0.081782111">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should indicate selected state for view mode buttons" time="0.060656681">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle empty title gracefully" time="0.029185074">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle very long titles" time="0.025097216">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle null callback functions gracefully" time="0.040628727">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle rapid view mode changes" time="0.397958323">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should maintain state consistency during re-renders" time="0.122172925">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should not cause unnecessary re-renders with same props" time="0.032732435">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should handle high frequency interactions efficiently" time="0.69985215">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" timestamp="2025-09-07T10:01:38.042Z" hostname="c82ba9db4d53" tests="19" failures="0" errors="0" skipped="0" time="2.284762335">
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should provide showError function through context" time="0.080115144">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should not display error dialog initially" time="0.01841203">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via context" time="0.367093205">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via export" time="0.086108049">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display stack trace when provided" time="0.265143502">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should not display stack trace section when stack trace is same as error message" time="0.087393987">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when Escape key is pressed" time="0.124175157">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when close button is clicked" time="0.184804985">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should focus close button when dialog opens" time="0.134741917">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle empty error message gracefully" time="0.040660216">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle long error messages" time="0.07210109">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle special characters in error messages" time="0.096653298">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should have proper ARIA attributes" time="0.107570032">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should trap focus within the dialog" time="0.149876381">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should cleanup properly on unmount" time="0.048233763">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle multiple error triggers correctly" time="0.151937521">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle rapid error triggers" time="0.094311304">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should display dialog with correct title" time="0.071299229">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should have full width and small max width" time="0.09678182">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" timestamp="2025-09-07T10:01:38.047Z" hostname="c82ba9db4d53" tests="20" failures="0" errors="0" skipped="0" time="2.316279321">
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should render loading state initially" time="0.216323131">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should load data on mount" time="0.026543315">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should start in UI mode by default" time="0.132407234">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should switch between UI and JSON modes" time="0.174737853">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should convert data when switching modes" time="0.160926658">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate filter expressions correctly" time="0.130331235">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should accept valid filter expressions" time="0.117795007">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate array structure" time="0.106104332">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should save filters successfully" time="0.063798623">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should reset filters to original data" time="0.122116179">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should not reset if user cancels confirmation" time="0.061119885">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should display error for invalid JSON syntax" time="0.102376009">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should clear validation errors when switching modes" time="0.159873873">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should display filters in UI mode" time="0.018860847">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should update filters in UI mode" time="0.0946913">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Loading States &gt; should disable controls during loading" time="0.116905035">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle keyboard shortcuts in JSON mode" time="0.131679584">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle tab navigation between controls" time="0.090562982">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API load errors gracefully" time="0.203333158">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API save errors gracefully" time="0.080717712">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" timestamp="2025-09-07T10:01:38.051Z" hostname="c82ba9db4d53" tests="38" failures="0" errors="0" skipped="0" time="2.744101306">
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with empty state when no value provided" time="0.128928174">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with custom placeholder" time="0.028900259">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should parse existing expression into pills" time="0.049727254">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should handle disabled state" time="0.031558667">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse simple field expressions" time="0.13289583">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse complex expressions with combinators" time="0.04243594">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle incomplete expressions" time="0.052215999">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle similarity expressions with thresholds" time="0.01764166">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle invalid expressions gracefully" time="0.015759274">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should open field selector when add pill is clicked" time="0.122092488">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add field when selected from popup" time="0.137707339">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add AND combinator when adding second field" time="0.133227745">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should not open selector when disabled" time="0.050279461">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should open operation selector when field pill is clicked" time="0.051849464">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should update operation when selected from popup" time="0.111687581">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should handle similarity operation with threshold" time="0.115399643">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should show current operation in popup" time="0.045158199">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should not open operation selector when disabled" time="0.056237435">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should delete pill when delete button is clicked in operation popup" time="0.117584285">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should remove combinator when deleting condition pill" time="0.100436652">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should handle deletion of middle pill in complex expression" time="0.106640669">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle escape key to close popups" time="0.097008173">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle tab navigation through pills" time="0.127382352">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle enter key to activate pills" time="0.040868039">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle completely invalid expression" time="0.019201522">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle mixed valid and invalid tokens" time="0.022225035">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle empty field values gracefully" time="0.025949007">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close field selector when close button is clicked" time="0.100685735">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close operation selector when close button is clicked" time="0.074773119">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close popups when clicking outside" time="0.086102598">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with small size" time="0.01343337">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with medium size" time="0.014067899">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should have proper ARIA attributes" time="0.025596483">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should announce pill configuration state" time="0.042480281">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should support keyboard navigation" time="0.058601509">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should call onChange with updated expression when pills change" time="0.100553753">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should preserve other pills when updating one pill" time="0.105542024">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should handle rapid updates without conflicts" time="0.129343481">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$8f5pjx7uw6t&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$8f5pjx7uw6t&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
