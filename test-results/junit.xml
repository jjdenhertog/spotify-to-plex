<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="608" failures="0" errors="0" time="19.14085711">
    <testsuite name="packages/http-client/src/__tests__/AxiosRequest.test.ts" timestamp="2025-09-07T10:17:25.843Z" hostname="c82ba9db4d53" tests="21" failures="0" errors="0" skipped="0" time="0.019258744">
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should have all HTTP methods" time="0.002662418">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should map to correct method functions" time="0.000618559">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate GET requests correctly" time="0.002332033">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate POST requests correctly" time="0.000457976">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate PUT requests correctly" time="0.000523017">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate DELETE requests correctly" time="0.000403716">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate GET errors" time="0.002188211">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate POST errors" time="0.000513607">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate PUT errors" time="0.000534207">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate DELETE errors" time="0.000437106">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for GET" time="0.000643679">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for POST" time="0.000348514">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for PUT" time="0.000409625">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for DELETE" time="0.000487757">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should support chaining and method calls" time="0.000561948">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should handle concurrent requests" time="0.001016074">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should provide consistent interface across all methods" time="0.000333715">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should maintain object structure" time="0.001066306">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should be extensible" time="0.000429776">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should be the default export of the module" time="0.000264844">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should not expose internal implementation details" time="0.000472537">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" timestamp="2025-09-07T10:17:25.852Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.063691494">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should make DELETE request with correct parameters" time="0.010708012">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.005528309">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should include required headers" time="0.002197541">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001285718">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.000870022">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate axios errors" time="0.009025298">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate HTTP error responses" time="0.001101065">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle authorization errors" time="0.001106135">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle not found errors" time="0.001186537">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle connection timeouts" time="0.001201027">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should support generic type parameters" time="0.001173167">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle complex response types" time="0.000865683">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle void response types" time="0.000859892">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with playlist deletion endpoint" time="0.001835226">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.002539436">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should handle different token formats" time="0.00418964">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle concurrent requests" time="0.003089174">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002625677">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle network retries gracefully" time="0.001117376">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle empty token" time="0.00137819">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle special characters in URL" time="0.000988375">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle very long URLs" time="0.000895273">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001066566">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.001492632">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosGet.test.ts" timestamp="2025-09-07T10:17:25.863Z" hostname="c82ba9db4d53" tests="22" failures="0" errors="0" skipped="0" time="0.053948667">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should make GET request with correct parameters" time="0.007683979">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use default timeout of 10 seconds" time="0.003974487">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.001910067">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom config with defaults" time="0.001359389">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should allow custom timeout to override default" time="0.001371819">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom headers with Plex token header" time="0.005656401">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should not allow custom headers to override Plex token" time="0.001477391">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should preserve httpsAgent from default configuration" time="0.001340589">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate axios errors" time="0.00351624">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate HTTP error responses" time="0.000963454">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should handle timeout errors" time="0.000938924">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should support generic type parameters" time="0.00076929">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should handle complex response types" time="0.00145336">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should always include X-Plex-Token header" time="0.001214107">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should handle different token formats" time="0.002763559">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should work with different Plex API endpoints" time="0.001644513">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle concurrent requests" time="0.001918267">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle large response data" time="0.00559825">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.001781055">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle empty token" time="0.001069515">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle very long URLs" time="0.00071757">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle special characters in URL" time="0.00068219">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPost.test.ts" timestamp="2025-09-07T10:17:25.868Z" hostname="c82ba9db4d53" tests="28" failures="0" errors="0" skipped="0" time="0.06477881">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should make POST request with correct parameters" time="0.008579162">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should use empty object as request body" time="0.001468921">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001043015">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should include required headers" time="0.005102832">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001484092">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.005744871">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001725565">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.00069085">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000760111">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate axios errors" time="0.003911836">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate HTTP error responses" time="0.001074626">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle server errors" time="0.000896083">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle connection timeouts" time="0.001102666">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should support generic type parameters" time="0.001372909">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle complex response types" time="0.000916583">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle void response types" time="0.001006895">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with playlist creation endpoint" time="0.001475281">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with different Plex server URLs" time="0.001930947">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should handle different token formats" time="0.007258153">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle concurrent requests" time="0.00211412">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.003221535">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle large response payloads" time="0.001494721">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle empty token" time="0.001265438">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle special characters in URL" time="0.000863542">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle very long URLs" time="0.000783241">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should work with HTTP and HTTPS URLs" time="0.001102836">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should always send empty object as body" time="0.001007645">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.000870522">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPut.test.ts" timestamp="2025-09-07T10:17:25.881Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.077152606">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should make PUT request with correct parameters" time="0.008153626">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should use empty object as request body" time="0.001449951">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001162427">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should include required headers" time="0.005529179">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001572963">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.006112217">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001752725">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.000595488">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000726031">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate axios errors" time="0.00499328">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate HTTP error responses" time="0.001048975">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle authorization errors" time="0.001507182">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle conflict errors" time="0.000893243">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle connection timeouts" time="0.001944128">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should support generic type parameters" time="0.001215147">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle complex response types" time="0.001876996">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle void response types" time="0.000827412">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with playlist update endpoint" time="0.000937163">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.001717194">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should handle different token formats" time="0.00346314">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle concurrent requests" time="0.001577012">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.00280607">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle large response payloads" time="0.00139695">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle network retries gracefully" time="0.003712323">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle empty token" time="0.001047855">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle special characters in URL" time="0.00072735">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle very long URLs" time="0.000767861">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001385819">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.006730485">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should always send empty object as body" time="0.002586517">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.001102226">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; idempotency characteristics &gt; should be idempotent - multiple calls with same parameters" time="0.000766531">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" timestamp="2025-09-07T10:17:25.892Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.024954385">
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate strings" time="0.007240273">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate numbers" time="0.000520458">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle empty array" time="0.000588438">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle array with no duplicates" time="0.000681929">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle single element array" time="0.000458717">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle array with all same elements" time="0.000370145">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle null and undefined values" time="0.000397376">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle mixed data types" time="0.000583339">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should compare object references, not values" time="0.002356804">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should handle array of objects with same reference" time="0.000881523">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should handle large arrays efficiently" time="0.004741228">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should maintain original order of first occurrences" time="0.000496117">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should be compatible with Array.prototype.filter" time="0.000311954">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should receive correct parameters from filter" time="0.001395659">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" timestamp="2025-09-07T10:17:25.896Z" hostname="c82ba9db4d53" tests="34" failures="0" errors="0" skipped="0" time="0.037198149">
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should construct API URL with protocol, host and path" time="0.003273907">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should work with HTTPS URLs" time="0.000539698">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle paths with query parameters" time="0.000760411">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle root path" time="0.00070574">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when port is missing" time="0.002231222">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when URL has no port in hostname only format" time="0.00066754">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with explicit port numbers" time="0.00072478">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTPS port" time="0.000437486">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTP port" time="0.000420226">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle complex hostnames" time="0.000985024">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should preserve protocol from original URL" time="0.000414716">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with existing paths that get replaced" time="0.000426086">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with query parameters that get replaced" time="0.000252083">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with fragments that get replaced" time="0.000498087">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths starting with slash" time="0.000426786">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths not starting with slash" time="0.000518187">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle empty paths" time="0.000309854">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle complex paths" time="0.000920943">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths with special characters" time="0.000520697">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should throw specific error message about Roon extension" time="0.000581198">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle malformed URLs gracefully" time="0.000538718">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle invalid protocols" time="0.00065861">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with typical Plex server configurations" time="0.0013722">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with Plex API endpoints" time="0.001028885">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should handle dynamic port assignments" time="0.000762361">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve protocol exactly" time="0.000402226">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve hostname exactly" time="0.000780031">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve port exactly" time="0.000655349">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle very long paths" time="0.000377926">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle paths with Unicode characters" time="0.003098444">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle IPv6 addresses with ports" time="0.000271904">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle unusual but valid port numbers" time="0.000478437">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle many URL constructions efficiently" time="0.006458142">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle complex URLs efficiently" time="0.000314384">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" timestamp="2025-09-07T10:17:25.906Z" hostname="c82ba9db4d53" tests="66" failures="0" errors="0" skipped="0" time="0.171636038">
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for empty expression" time="0.009766538">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for whitespace-only expression" time="0.001998549">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for single valid field" time="0.005163983">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for field with operation" time="0.002440604">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields as standalone" time="0.005362026">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields with operations" time="0.005281505">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject invalid field names" time="0.001220257">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject multiple invalid fields" time="0.000608599">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should handle mixed valid and invalid fields" time="0.000517258">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept all valid operations" time="0.00140169">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle operation regex pattern with special characters" time="0.001341959">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject operations with invalid characters" time="0.001134246">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept similarity operations with valid thresholds" time="0.001790565">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle boundary values for similarity thresholds" time="0.001864717">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should validate exact similarity threshold error messages" time="0.000501437">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle similarity operations with malformed syntax" time="0.00072238">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject invalid operations" time="0.000506677">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject similarity operations with invalid thresholds" time="0.00702196">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle missing similarity threshold" time="0.000385076">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept AND operator" time="0.000576068">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept OR operator" time="0.000395516">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject invalid boolean operators" time="0.000356945">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject all invalid boolean operators comprehensively" time="0.001091725">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle mixed case invalid operators" time="0.000576698">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should detect multiple invalid operators in single expression" time="0.000403695">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle multiple boolean operators" time="0.000405905">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should be case sensitive for operators" time="0.000318534">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate balanced expressions" time="0.001015424">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate operator-to-condition ratio precisely" time="0.00140092">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex nested logical patterns" time="0.000824921">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should reject unbalanced expressions" time="0.000625758">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex valid expressions" time="0.000807591">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle expressions with both field:operation and standalone fields" time="0.000370926">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle multiple standalone fields" time="0.000384545">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle all standalone fields" time="0.000398425">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle parsing errors gracefully" time="0.000420236">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should return ValidationResult interface" time="0.00066159">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle very long expressions" time="0.000566518">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with extra whitespace" time="0.000389156">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with no spaces around operators" time="0.000365495">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle tabs and other whitespace characters" time="0.000341965">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle single character inputs" time="0.000353525">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle field extraction edge cases" time="0.000581069">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle regex special characters in field context" time="0.000840412">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should validate exact syntax pattern matching" time="0.000566058">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only operators" time="0.000332795">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only colons" time="0.000328825">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle unicode characters" time="0.001006605">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle extremely malformed expressions" time="0.00215445">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should maintain consistent validation result structure" time="0.002867661">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle moderately complex expressions efficiently" time="0.000513388">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle many validation calls efficiently" time="0.037373781">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle deeply nested validation without performance degradation" time="0.003335498">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should validate real-world music search expressions" time="0.007525107">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should handle all valid field combinations with all operations" time="0.007653879">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide specific error messages for each validation failure" time="0.006074647">
            <system-out>
Expression &quot;artist:match AND&quot; failed validation with errors: [
  [32m&apos;Invalid expression syntax. Expected format: &quot;field[:operation] AND/OR field[:operation]&quot;&apos;[39m
]

            </system-out>
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide helpful error messages" time="0.000507247">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should handle potential ReDoS (Regular Expression Denial of Service) patterns" time="0.003669382">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should sanitize and handle injection-like patterns safely" time="0.000882673">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; security and robustness &gt; should handle extremely large expressions without memory issues" time="0.002643418">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should provide clear and actionable error messages" time="0.000731">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should provide multiple specific errors for expressions with multiple issues" time="0.00065971">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error message quality and specificity &gt; should prioritize validation errors appropriately" time="0.000410986">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should return identical results for identical inputs" time="0.002715229">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should handle concurrent validations consistently" time="0.013952308">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; consistency and determinism &gt; should maintain validation behavior across different input encodings" time="0.000889312">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/functions/parseExpression.test.ts" timestamp="2025-09-07T10:17:25.925Z" hostname="c82ba9db4d53" tests="60" failures="0" errors="0" skipped="0" time="0.090299842">
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should return a function when given a valid expression" time="0.00355368">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should return a function that always returns false for invalid expressions" time="0.001597563">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; basic functionality &gt; should handle empty expressions gracefully" time="0.000842342">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artist match" time="0.000926063">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by title match" time="0.00070978">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by album match" time="0.000788081">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artistWithTitle match" time="0.000615908">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; match operation &gt; should filter by artistInTitle match" time="0.000755391">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; contains operation &gt; should filter by artist contains" time="0.000784891">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; contains operation &gt; should filter by title contains" time="0.000507557">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; is operation (exact match) &gt; should filter by exact match (both match and contains)" time="0.000826602">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; not operation (negation) &gt; should filter by negated match" time="0.000477467">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should filter by similarity threshold" time="0.000791381">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should handle different similarity thresholds" time="0.000970093">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; simple field expressions &gt; similarity operations &gt; should handle missing similarity values" time="0.000486307">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle simple AND expressions" time="0.000906762">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle multiple AND operations" time="0.000538778">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; AND operations &gt; should handle mixed operations with AND" time="0.000547628">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; OR operations &gt; should handle simple OR expressions" time="0.000615859">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; OR operations &gt; should handle multiple OR operations" time="0.004371763">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; mixed AND/OR operations &gt; should handle combined AND/OR expressions (left-to-right evaluation)" time="0.000570018">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; complex boolean expressions &gt; mixed AND/OR operations &gt; should handle complex mixed expressions" time="0.000563138">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid field names" time="0.006564723">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid operations" time="0.000873342">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid similarity thresholds" time="0.001154516">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle malformed condition format" time="0.001621293">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle invalid operators" time="0.000492417">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; invalid expressions and error handling &gt; should handle expressions with only operators" time="0.000444517">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with extra whitespace" time="0.000335505">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle case sensitivity in operators" time="0.000418966">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with missing fields" time="0.000300874">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle boundary similarity values" time="0.000589638">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle expressions with no valid conditions" time="0.000450867">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle extremely long expressions" time="0.00070217">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; edge cases and malformed input &gt; should handle decimal precision in similarity thresholds" time="0.000398416">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; real-world scenarios &gt; should handle typical music search patterns" time="0.002374574">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; real-world scenarios &gt; should handle high-precision matching requirements" time="0.000454046">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="parseExpression &gt; performance &gt; should handle many evaluations efficiently" time="0.023451983">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist match AND title match" time="0.001066705">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist match AND title contains" time="0.000575498">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; basic patterns &gt; should migrate artist contains AND title match" time="0.000576869">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist similarity with threshold" time="0.000945483">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist match AND title similarity" time="0.000359226">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate artist contains AND title similarity" time="0.000423046">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; similarity patterns &gt; should migrate dual similarity thresholds" time="0.000503577">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; complex patterns &gt; should migrate triple condition with album" time="0.000474346">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; complex patterns &gt; should migrate complex similarity with match pattern" time="0.000672949">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; exact match patterns (is operation) &gt; should migrate artist exact match" time="0.000519727">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; exact match patterns (is operation) &gt; should migrate title exact match" time="0.000414336">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should migrate artist not match" time="0.000344144">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should migrate title not match" time="0.000265423">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; negation patterns (not operation) &gt; should handle complex negation patterns (current implementation behavior)" time="0.000247653">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; format variations &gt; should handle different function wrapper formats" time="0.000514567">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; format variations &gt; should handle extra whitespace" time="0.000253493">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; decimal precision in legacy filters &gt; should migrate artistWithTitle similarity patterns" time="0.000262994">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; decimal precision in legacy filters &gt; should handle integer thresholds" time="0.000286484">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should return null for unrecognized patterns" time="0.000444296">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should return null for malformed input" time="0.007319544">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; unmigrateable patterns &gt; should handle errors gracefully" time="0.000347845">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/functions/parseExpression.test.ts" name="migrateLegacyFilter &gt; comprehensive migration test &gt; should migrate all supported patterns correctly" time="0.004066338">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/compareTitles.test.ts" timestamp="2025-09-07T10:17:25.942Z" hostname="c82ba9db4d53" tests="52" failures="0" errors="0" skipped="0" time="0.268856869">
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for undefined inputs" time="0.010810473">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when first parameter is undefined" time="0.001325739">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when second parameter is undefined" time="0.00140438">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for empty strings" time="0.001287929">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches (case insensitive)" time="0.034095655">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches with different cases" time="0.000534008">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should not match different strings" time="0.000367415">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should handle punctuation in matching" time="0.000341755">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should detect when second string contains in first (normalized)" time="0.000665679">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should not detect when first string contains in second" time="0.000395455">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should handle case insensitive contains" time="0.000360575">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should detect contains in both directions when twoWayContain is true" time="0.000563788">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should work with two-way contains for equal strings" time="0.000422536">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains for titles shorter than 5 characters" time="0.00067759">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains when second title is shorter than 5 characters" time="0.000395536">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should use contains when both titles are 5+ characters" time="0.000469407">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should handle exactly 5 character strings" time="0.000295985">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return similarity score between 0 and 1" time="0.000440006">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return higher similarity for similar strings" time="0.000290865">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return perfect similarity for identical strings" time="0.000358055">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString for contains logic" time="0.002177341">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString twice for two-way contains" time="0.000547368">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should not call createSearchString for short titles" time="0.00070608">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should detect reverse containment when shorter string is &gt;=50% of longer string length" time="0.000540767">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should handle exact 50% ratio boundary" time="0.000515657">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should only apply reverse containment when first string is shorter" time="0.000352075">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should not apply reverse containment when standard containment already found" time="0.000347585">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; remix and ratio-based reverse containment &gt; should handle complex remix scenarios" time="0.001082725">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should handle exactly 5-char first string with 4-char second string" time="0.000457566">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should handle exactly 5-char first string with 4-char second string that does not match" time="0.000369415">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should not apply boundary case when first string is not exactly 5 chars" time="0.005215164">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; boundary case: 5-char first, 4-char second &gt; should not apply boundary case when second string is not exactly 4 chars" time="0.000445116">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle null and undefined mixed scenarios" time="0.001012875">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle empty and whitespace-only strings" time="0.001123196">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle strings with only punctuation" time="0.000560728">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle mixed case with whitespace trimming" time="0.000389556">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; comprehensive edge cases and boundary conditions &gt; should handle boundary lengths around 5-character threshold" time="0.000830302">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should handle strings that are similar but not exact matches" time="0.000853152">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should handle international characters correctly" time="0.00144163">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; advanced similarity and matching edge cases &gt; should calculate different similarity scores for different inputs" time="0.000833682">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; two-way containment comprehensive testing &gt; should work bidirectionally for all valid combinations" time="0.000835562">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; two-way containment comprehensive testing &gt; should respect 5-character minimum in two-way mode" time="0.000553318">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle music track comparisons" time="0.000781601">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle partial track matches" time="0.000627819">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle remixes and versions" time="0.000713621">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle abbreviations" time="0.000626789">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle common music industry patterns" time="0.001185247">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle very long titles" time="0.00284596">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle special characters" time="0.000401306">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle unicode characters" time="0.000343715">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle whitespace variations" time="0.000285834">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; performance &gt; should handle many comparisons efficiently" time="0.171848681">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/createSearchString.test.ts" timestamp="2025-09-07T10:17:25.953Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.017027922">
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should convert string to lowercase" time="0.002891831">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should trim whitespace" time="0.000513887">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle empty string" time="0.000498287">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle whitespace-only string" time="0.000371055">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; a variants &gt; should normalize à, á, â, ã, ä, å to a" time="0.000600999">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; e variants &gt; should normalize è, é, ê, ë to e" time="0.000405336">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; i variants &gt; should normalize ì, í, î, ï to i" time="0.000287714">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; o variants &gt; should normalize ò, ó, ô, õ, ö to o" time="0.000297744">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; u variants &gt; should normalize ù, ú, û, ü to u" time="0.000385586">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; y variants &gt; should normalize ý, ÿ to y" time="0.000261623">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize æ to ae" time="0.000274034">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize œ to oe" time="0.000511068">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ç to c" time="0.000270614">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ñ to n" time="0.000515447">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize music artist names" time="0.000430736">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize song titles" time="0.000405376">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should handle mixed content" time="0.000243494">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle strings with only diacritics" time="0.000197573">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle mixed case with diacritics" time="0.000202003">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle numbers and special characters" time="0.000222864">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle very long strings" time="0.000363795">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; performance &gt; should handle large strings efficiently" time="0.003176305">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should be idempotent" time="0.000225634">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should handle null/undefined gracefully" time="0.000173802">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" timestamp="2025-09-07T10:17:25.958Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.029471749">
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should convert input to lowercase" time="0.003588701">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should trim whitespace from result" time="0.000530467">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle empty string" time="0.000591528">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle whitespace-only string" time="0.000960664">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter out words when filtered=true" time="0.000489787">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should not filter out words when filtered=false" time="0.000366695">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter multiple words" time="0.001541252">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle case insensitive filtering" time="0.000610678">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle words not in filter list" time="0.000477057">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove quotes when removeQuotes=true" time="0.000405456">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should not remove quotes when removeQuotes=false" time="0.000250083">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove various quote types" time="0.000248633">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should handle multiple quote characters" time="0.000297974">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at separators when cutOffSeparators=true" time="0.000459766">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off when cutOffSeparators=false" time="0.000311284">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at last occurrence of separator" time="0.000358905">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should handle multiple separator types" time="0.000513138">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off if separator not found" time="0.000437966">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove empty brackets" time="0.000349975">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove multiple empty brackets" time="0.000288464">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should not remove non-empty brackets" time="0.000217514">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove trailing dashes" time="0.002652978">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove multiple trailing dashes" time="0.000209363">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not remove dashes from short strings" time="0.002072459">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should handle starting dashes" time="0.000186643">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not affect middle dashes" time="0.000216693">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should apply all filters when all flags are true" time="0.000279244">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should handle complex real-world examples" time="0.000240674">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should preserve order of operations" time="0.000368275">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only filtered content" time="0.000286444">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle repeated separators" time="0.000236284">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle mixed whitespace" time="0.000223903">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle very long strings" time="0.00068513">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only separators" time="0.000291194">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should call getCurrentMusicSearchConfig" time="0.00067658">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should use configuration values" time="0.000335415">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should handle empty configuration arrays" time="0.000308835">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle many filter operations efficiently" time="0.000431616">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle large filter arrays efficiently" time="0.001633703">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" timestamp="2025-09-07T10:17:25.964Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.016046378">
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; returns clean song titles" time="0.002750459">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes feat markers" time="0.0007702">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes parentheses content" time="0.000799731">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; prioritizes first occurrence" time="0.000770821">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;&quot; -&gt; &quot;&quot;" time="0.000456427">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;(&quot; -&gt; &quot;&quot;" time="0.000270474">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;feat&quot; -&gt; &quot;&quot;" time="0.000421426">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;a&quot; -&gt; &quot;a&quot;" time="0.000257473">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; removes from first &quot;feat&quot; occurrence" time="0.000662389">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles case sensitivity" time="0.00072624">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; ignores closing parenthesis only" time="0.000393616">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; error handling &gt; handles null and undefined inputs" time="0.002439635">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Despacito feat. Justin Bieber&quot;" time="0.000375205">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Bohemian Rhapsody (Live Aid 1985)&quot;" time="0.000742521">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/api/index.test.ts" timestamp="2025-09-07T10:17:25.966Z" hostname="c82ba9db4d53" tests="2" failures="0" errors="0" skipped="0" time="0.016060748">
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should create mock request and response objects" time="0.009070999">
        </testcase>
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should verify response helper works" time="0.003558381">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/hooks/useDualModeEditor.test.ts" timestamp="2025-09-07T10:17:25.967Z" hostname="c82ba9db4d53" tests="3" failures="0" errors="0" skipped="0" time="0.047317052">
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should initialize with default state" time="0.03093044">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should switch view modes" time="0.007179482">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should update data when changed" time="0.004384972">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/pages/index.test.tsx" timestamp="2025-09-07T10:17:25.967Z" hostname="c82ba9db4d53" tests="27" failures="0" errors="0" skipped="0" time="5.851275399">
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render loading state initially" time="0.129356907">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render without crashing" time="0.035278411">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection component when not connected" time="0.088473037">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection when connected but no URI" time="0.039877547">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should show main content when connected with URI" time="0.538790833">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render all menu items" time="0.299356503">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render menu items as clickable cards" time="0.182566443">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render Plex Settings button" time="0.136255385">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should open Plex settings dialog when button is clicked" time="0.544867839">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should close Plex settings dialog when close button is clicked" time="0.55336885">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex query parameter on router ready" time="0.299047658">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle successful plex verification" time="0.281250135">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should not process plex query when router is not ready" time="0.018337461">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex verification failure" time="0.044298919">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle settings API error gracefully" time="0.053557891">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle auth verification error" time="0.055379576">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should update state when connection is established through PlexConnection" time="0.224392597">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should handle loading state changes correctly" time="0.17810273">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnection" time="0.05779195">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnectionDialog" time="0.239071746">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have proper page title" time="0.120001415">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible navigation links" time="0.157845012">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible button for Plex settings" time="0.089608143">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible dialog when opened" time="0.323976201">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle multiple rapid state changes" time="1.096256951">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should cleanup properly on unmount" time="0.038136732">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle component re-renders without unnecessary API calls" time="0.020016974">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" timestamp="2025-09-07T10:17:25.971Z" hostname="c82ba9db4d53" tests="7" failures="0" errors="0" skipped="0" time="1.176421139">
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should render without crashing" time="0.063171887">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should not display confirmation dialog initially" time="0.016070888">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display confirmation dialog when triggered" time="0.472195327">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should work with exported confirm function" time="0.130379871">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display custom confirmation text" time="0.110872885">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when confirm button is clicked" time="0.213456542">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when cancel button is clicked" time="0.166758209">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" timestamp="2025-09-07T10:17:25.972Z" hostname="c82ba9db4d53" tests="25" failures="0" errors="0" skipped="0" time="0.777799798">
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without crashing" time="0.071391614">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render with children" time="0.013119796">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render multiple children" time="0.012802772">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without children" time="0.007531797">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should apply HTML attributes correctly" time="0.011423473">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle click events" time="0.016361752">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle mouse events" time="0.012412617">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle keyboard events" time="0.010109404">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should have Material-UI Paper base styling" time="0.012166063">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should apply custom margin top styling" time="0.090808779">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should merge with additional sx props when provided" time="0.028407503">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should be keyboard accessible when tabIndex is provided" time="0.013064836">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support ARIA attributes" time="0.011635126">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support screen reader content" time="0.012949694">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render text content" time="0.009996482">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render React elements" time="0.010656291">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render arrays of elements" time="0.011224579">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle conditional rendering" time="0.01052505">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle complex nested content" time="0.018799437">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle null children gracefully" time="0.009925231">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle empty string children" time="0.007552598">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle numeric children" time="0.009696908">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle mixed content types" time="0.010686232">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should not re-render unnecessarily with same props" time="0.019576878">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should handle large amounts of content efficiently" time="0.326560108">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" timestamp="2025-09-07T10:17:25.976Z" hostname="c82ba9db4d53" tests="33" failures="0" errors="0" skipped="0" time="4.663074311">
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render without crashing" time="0.226912393">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should display the correct title" time="0.042391212">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render all action buttons" time="0.036952215">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render view mode toggle buttons" time="0.03165419">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render icons within buttons" time="0.036048142">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show UI mode as selected by default" time="0.028568556">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show JSON mode as selected when specified" time="0.037324231">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when UI mode is clicked" time="0.60968361">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when JSON mode is clicked" time="0.272961317">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should handle clicking the same mode button" time="0.203167545">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should be exclusive selection (only one mode selected at a time)" time="0.054809548">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onReset when reset button is clicked" time="0.157312725">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onSave when save button is clicked" time="0.1063077">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should handle multiple rapid clicks on action buttons" time="0.236944345">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should support keyboard interaction on action buttons" time="0.089827286">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should disable all interactive elements when disabled prop is true" time="0.099894159">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is false" time="0.123755687">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is undefined" time="0.097672077">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should not trigger callbacks when buttons are disabled" time="0.097371793">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have proper layout structure" time="0.033238582">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should apply proper button variants and sizes" time="0.03525164">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have divider between toggle buttons and action buttons" time="0.077141235">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have proper ARIA attributes" time="0.093289335">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should be keyboard navigable" time="0.095627468">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have appropriate button labels" time="0.059434494">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should indicate selected state for view mode buttons" time="0.074205154">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle empty title gracefully" time="0.088522747">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle very long titles" time="0.072723853">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle null callback functions gracefully" time="0.109189941">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle rapid view mode changes" time="0.518466034">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should maintain state consistency during re-renders" time="0.110072593">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should not cause unnecessary re-renders with same props" time="0.083270623">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should handle high frequency interactions efficiently" time="0.61181801">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" timestamp="2025-09-07T10:17:25.981Z" hostname="c82ba9db4d53" tests="4" failures="0" errors="0" skipped="0" time="0.526152033">
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should render without crashing" time="0.275136088">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should display JSON value" time="0.117780313">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle valid JSON changes" time="0.07253021">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle null value gracefully" time="0.057117931">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" timestamp="2025-09-07T10:17:25.981Z" hostname="c82ba9db4d53" tests="19" failures="0" errors="0" skipped="0" time="1.545414351">
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should provide showError function through context" time="0.045902762">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should not display error dialog initially" time="0.013572293">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via context" time="0.261703777">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via export" time="0.064592398">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display stack trace when provided" time="0.167321457">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should not display stack trace section when stack trace is same as error message" time="0.064938312">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when Escape key is pressed" time="0.068313971">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when close button is clicked" time="0.13167871">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should focus close button when dialog opens" time="0.074213344">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle empty error message gracefully" time="0.028732458">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle long error messages" time="0.063710555">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle special characters in error messages" time="0.077805205">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should have proper ARIA attributes" time="0.063721505">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should trap focus within the dialog" time="0.103214286">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should cleanup properly on unmount" time="0.031913983">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle multiple error triggers correctly" time="0.093516639">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle rapid error triggers" time="0.064729629">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should display dialog with correct title" time="0.057417056">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should have full width and small max width" time="0.064513896">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" timestamp="2025-09-07T10:17:25.984Z" hostname="c82ba9db4d53" tests="20" failures="0" errors="0" skipped="0" time="1.775145474">
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should render loading state initially" time="0.187353731">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should load data on mount" time="0.023277021">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should start in UI mode by default" time="0.096097815">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should switch between UI and JSON modes" time="0.133674528">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should convert data when switching modes" time="0.097634087">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate filter expressions correctly" time="0.081703311">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should accept valid filter expressions" time="0.085673057">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate array structure" time="0.094913458">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should save filters successfully" time="0.057857962">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should reset filters to original data" time="0.082507242">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should not reset if user cancels confirmation" time="0.038508777">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should display error for invalid JSON syntax" time="0.085629016">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should clear validation errors when switching modes" time="0.100096092">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should display filters in UI mode" time="0.016218661">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should update filters in UI mode" time="0.065105345">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Loading States &gt; should disable controls during loading" time="0.116485755">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle keyboard shortcuts in JSON mode" time="0.09150173">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle tab navigation between controls" time="0.079616431">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API load errors gracefully" time="0.167122684">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API save errors gracefully" time="0.07039521">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" timestamp="2025-09-07T10:17:25.987Z" hostname="c82ba9db4d53" tests="38" failures="0" errors="0" skipped="0" time="1.827875152">
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with empty state when no value provided" time="0.090046969">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with custom placeholder" time="0.02324052">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should parse existing expression into pills" time="0.047448394">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should handle disabled state" time="0.018501413">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse simple field expressions" time="0.105712911">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse complex expressions with combinators" time="0.024258664">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle incomplete expressions" time="0.027590982">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle similarity expressions with thresholds" time="0.017084233">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle invalid expressions gracefully" time="0.019223573">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should open field selector when add pill is clicked" time="0.097234491">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add field when selected from popup" time="0.088096712">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add AND combinator when adding second field" time="0.078004258">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should not open selector when disabled" time="0.036807033">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should open operation selector when field pill is clicked" time="0.039287118">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should update operation when selected from popup" time="0.066541415">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should handle similarity operation with threshold" time="0.070792126">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should show current operation in popup" time="0.037895229">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should not open operation selector when disabled" time="0.046283847">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should delete pill when delete button is clicked in operation popup" time="0.068636495">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should remove combinator when deleting condition pill" time="0.066427993">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should handle deletion of middle pill in complex expression" time="0.069283724">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle escape key to close popups" time="0.05210825">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle tab navigation through pills" time="0.069241633">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle enter key to activate pills" time="0.02607492">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle completely invalid expression" time="0.010241236">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle mixed valid and invalid tokens" time="0.012210314">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle empty field values gracefully" time="0.008799895">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close field selector when close button is clicked" time="0.061597985">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close operation selector when close button is clicked" time="0.062246324">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close popups when clicking outside" time="0.051968288">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with small size" time="0.008944157">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with medium size" time="0.010766613">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should have proper ARIA attributes" time="0.011646386">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should announce pill configuration state" time="0.026803021">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should support keyboard navigation" time="0.039231187">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should call onChange with updated expression when pills change" time="0.066337132">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should preserve other pills when updating one pill" time="0.091080953">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should handle rapid updates without conflicts" time="0.07392472">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$jn0t541kzef&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$jn0t541kzef&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
