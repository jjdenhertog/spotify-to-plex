<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="501" failures="1" errors="0" time="24.458337422">
    <testsuite name="packages/http-client/src/__tests__/AxiosRequest.test.ts" timestamp="2025-09-07T07:18:02.987Z" hostname="c82ba9db4d53" tests="21" failures="0" errors="0" skipped="0" time="0.075097287">
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should have all HTTP methods" time="0.007753512">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; structure &gt; should map to correct method functions" time="0.001162235">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate GET requests correctly" time="0.020019213">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate POST requests correctly" time="0.000889461">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate PUT requests correctly" time="0.000993613">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; method delegation &gt; should delegate DELETE requests correctly" time="0.000832621">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate GET errors" time="0.004060654">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate POST errors" time="0.001866504">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate PUT errors" time="0.001172286">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; error handling delegation &gt; should propagate DELETE errors" time="0.000951933">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for GET" time="0.001081404">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for POST" time="0.000644129">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for PUT" time="0.00078119">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; type safety &gt; should support generic type parameters for DELETE" time="0.000974312">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should support chaining and method calls" time="0.001056854">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; usage patterns &gt; should handle concurrent requests" time="0.001808284">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should provide consistent interface across all methods" time="0.000674439">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should maintain object structure" time="0.001886364">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; interface consistency &gt; should be extensible" time="0.00079473">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should be the default export of the module" time="0.000545547">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/AxiosRequest.test.ts" name="AxiosRequest &gt; module exports &gt; should not expose internal implementation details" time="0.017059414">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" timestamp="2025-09-07T07:18:02.999Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.115227593">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should make DELETE request with correct parameters" time="0.026192374">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.015928409">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should include required headers" time="0.004964635">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001285817">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.000913742">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate axios errors" time="0.004925954">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should propagate HTTP error responses" time="0.009707858">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle authorization errors" time="0.002663705">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle not found errors" time="0.001386739">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; error handling &gt; should handle connection timeouts" time="0.00153658">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should support generic type parameters" time="0.001177896">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle complex response types" time="0.000859101">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; type safety &gt; should handle void response types" time="0.000862211">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with playlist deletion endpoint" time="0.001964816">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.002953708">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; Plex API specific features &gt; should handle different token formats" time="0.01519559">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle concurrent requests" time="0.003838031">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.006769699">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; performance and reliability &gt; should handle network retries gracefully" time="0.001098805">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle empty token" time="0.001362418">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle special characters in URL" time="0.000955232">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle very long URLs" time="0.000983033">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.000988323">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosDelete.test.ts" name="axiosDelete &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.002405752">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosGet.test.ts" timestamp="2025-09-07T07:18:03.011Z" hostname="c82ba9db4d53" tests="22" failures="0" errors="0" skipped="0" time="0.059101106">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should make GET request with correct parameters" time="0.011314008">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use default timeout of 10 seconds" time="0.00454678">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; basic functionality &gt; should use HTTPS agent with rejectUnauthorized: false" time="0.002333501">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom config with defaults" time="0.001783723">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should allow custom timeout to override default" time="0.001671692">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should merge custom headers with Plex token header" time="0.00149742">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should not allow custom headers to override Plex token" time="0.001597481">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; configuration merging &gt; should preserve httpsAgent from default configuration" time="0.001726623">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate axios errors" time="0.004004732">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should propagate HTTP error responses" time="0.001042073">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; error handling &gt; should handle timeout errors" time="0.000969863">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should support generic type parameters" time="0.000872801">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; type safety &gt; should handle complex response types" time="0.001730243">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should always include X-Plex-Token header" time="0.001418918">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should handle different token formats" time="0.003397255">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; Plex API specific features &gt; should work with different Plex API endpoints" time="0.001787484">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle concurrent requests" time="0.002031307">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should handle large response data" time="0.005486052">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.002164989">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle empty token" time="0.001209236">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle very long URLs" time="0.000895331">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosGet.test.ts" name="axiosGet &gt; edge cases &gt; should handle special characters in URL" time="0.000878871">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPost.test.ts" timestamp="2025-09-07T07:18:03.021Z" hostname="c82ba9db4d53" tests="28" failures="0" errors="0" skipped="0" time="0.068674112">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should make POST request with correct parameters" time="0.009690937">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should use empty object as request body" time="0.001462059">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001099455">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should include required headers" time="0.005279819">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001580531">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.005855137">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001901265">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.000698439">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000884842">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate axios errors" time="0.004132174">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should propagate HTTP error responses" time="0.001068444">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle server errors" time="0.002737926">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; error handling &gt; should handle connection timeouts" time="0.001119875">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should support generic type parameters" time="0.00147474">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle complex response types" time="0.001017944">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; type safety &gt; should handle void response types" time="0.001086114">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with playlist creation endpoint" time="0.00153924">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should work with different Plex server URLs" time="0.001905055">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; Plex API specific features &gt; should handle different token formats" time="0.003703818">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle concurrent requests" time="0.002131878">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.003274863">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; performance and reliability &gt; should handle large response payloads" time="0.001473539">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle empty token" time="0.001253436">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle special characters in URL" time="0.003334773">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should handle very long URLs" time="0.000882941">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; edge cases &gt; should work with HTTP and HTTPS URLs" time="0.001476139">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should always send empty object as body" time="0.001063224">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPost.test.ts" name="axiosPost &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.000945382">
        </testcase>
    </testsuite>
    <testsuite name="packages/http-client/src/__tests__/methods/axiosPut.test.ts" timestamp="2025-09-07T07:18:03.032Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.073442814">
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should make PUT request with correct parameters" time="0.015151109">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should use empty object as request body" time="0.003569567">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; basic functionality &gt; should create Agent with rejectUnauthorized: false" time="0.001086914">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should include required headers" time="0.00529282">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include Accept header for JSON responses" time="0.001576501">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; headers configuration &gt; should always include X-Plex-Token header" time="0.001029984">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should use custom HTTPS agent" time="0.001778613">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should configure agent to not reject unauthorized certificates" time="0.000832911">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; HTTPS Agent configuration &gt; should create new agent instance for each call" time="0.000909432">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate axios errors" time="0.004002892">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should propagate HTTP error responses" time="0.001047064">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle authorization errors" time="0.000874102">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle conflict errors" time="0.000870961">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; error handling &gt; should handle connection timeouts" time="0.00153898">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should support generic type parameters" time="0.001222156">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle complex response types" time="0.001899375">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; type safety &gt; should handle void response types" time="0.000907652">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with playlist update endpoint" time="0.001128925">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should work with different Plex resource endpoints" time="0.002011436">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; Plex API specific features &gt; should handle different token formats" time="0.003819431">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle concurrent requests" time="0.001670252">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should maintain consistent configuration across calls" time="0.003110221">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle large response payloads" time="0.001482149">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; performance and reliability &gt; should handle network retries gracefully" time="0.001393788">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle empty token" time="0.001100865">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle special characters in URL" time="0.000833801">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle very long URLs" time="0.000872791">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should work with both HTTP and HTTPS URLs" time="0.001229306">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; edge cases &gt; should handle numeric IDs in URLs" time="0.002937048">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should always send empty object as body" time="0.001061134">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; request body consistency &gt; should send same body structure across multiple calls" time="0.001234756">
        </testcase>
        <testcase classname="packages/http-client/src/__tests__/methods/axiosPut.test.ts" name="axiosPut &gt; idempotency characteristics &gt; should be idempotent - multiple calls with same parameters" time="0.000840111">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" timestamp="2025-09-07T07:18:03.046Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.071768962">
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate strings" time="0.02283244">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should filter out duplicate numbers" time="0.001821354">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle empty array" time="0.003146341">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; basic functionality &gt; should handle array with no duplicates" time="0.002038116">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle single element array" time="0.001790263">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle array with all same elements" time="0.001731672">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle null and undefined values" time="0.001847784">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; edge cases &gt; should handle mixed data types" time="0.00301656">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should compare object references, not values" time="0.004599551">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; object references &gt; should handle array of objects with same reference" time="0.0030228">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should handle large arrays efficiently" time="0.009227401">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; performance considerations &gt; should maintain original order of first occurrences" time="0.000526456">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should be compatible with Array.prototype.filter" time="0.000321284">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/array/filterUnique.test.ts" name="filterUnique &gt; function signature verification &gt; should receive correct parameters from filter" time="0.007862493">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" timestamp="2025-09-07T07:18:03.055Z" hostname="c82ba9db4d53" tests="34" failures="0" errors="0" skipped="0" time="0.080820521">
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should construct API URL with protocol, host and path" time="0.003907081">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should work with HTTPS URLs" time="0.000554867">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle paths with query parameters" time="0.000677749">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; basic functionality &gt; should handle root path" time="0.000743569">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when port is missing" time="0.002374011">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should throw error when URL has no port in hostname only format" time="0.00075274">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with explicit port numbers" time="0.001065084">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTPS port" time="0.000655929">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; port validation &gt; should work with default HTTP port" time="0.000641439">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle complex hostnames" time="0.012562285">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should preserve protocol from original URL" time="0.001241926">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with existing paths that get replaced" time="0.001249216">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with query parameters that get replaced" time="0.001121265">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL parsing &gt; should handle URLs with fragments that get replaced" time="0.002045967">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths starting with slash" time="0.003107681">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths not starting with slash" time="0.001159936">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle empty paths" time="0.001047194">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle complex paths" time="0.00228838">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; path handling &gt; should handle paths with special characters" time="0.001305347">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should throw specific error message about Roon extension" time="0.001316517">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle malformed URLs gracefully" time="0.001223926">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; error handling &gt; should handle invalid protocols" time="0.002059127">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with typical Plex server configurations" time="0.003300823">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should work with Plex API endpoints" time="0.00224604">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; real-world usage patterns &gt; should handle dynamic port assignments" time="0.001448999">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve protocol exactly" time="0.000501386">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve hostname exactly" time="0.001487599">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; URL component preservation &gt; should preserve port exactly" time="0.001894205">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle very long paths" time="0.000997463">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle paths with Unicode characters" time="0.000378955">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle IPv6 addresses with ports" time="0.000992613">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; edge cases &gt; should handle unusual but valid port numbers" time="0.001206546">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle many URL constructions efficiently" time="0.012801758">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/utils/getAPIUrl.test.ts" name="getAPIUrl &gt; performance &gt; should handle complex URLs efficiently" time="0.001098425">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" timestamp="2025-09-07T07:18:03.070Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.097522521">
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for empty expression" time="0.004669081">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: false for whitespace-only expression" time="0.000897382">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for single valid field" time="0.002526033">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; basic validation &gt; should return valid: true for field with operation" time="0.001443149">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields as standalone" time="0.002712956">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should accept all valid fields with operations" time="0.002583094">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject invalid field names" time="0.00152016">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should reject multiple invalid fields" time="0.00078311">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; field validation &gt; should handle mixed valid and invalid fields" time="0.000742929">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept all valid operations" time="0.003515396">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should accept similarity operations with valid thresholds" time="0.002649165">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject invalid operations" time="0.002221619">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should reject similarity operations with invalid thresholds" time="0.001329497">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; operation validation &gt; should handle missing similarity threshold" time="0.000889012">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept AND operator" time="0.004147064">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should accept OR operator" time="0.000637778">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should reject invalid boolean operators" time="0.000691769">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should handle multiple boolean operators" time="0.000588218">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; boolean operator validation &gt; should be case sensitive for operators" time="0.000490087">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should validate balanced expressions" time="0.007910494">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should reject unbalanced expressions" time="0.000992923">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; expression structure validation &gt; should handle complex valid expressions" time="0.001084534">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle expressions with both field:operation and standalone fields" time="0.000484687">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle multiple standalone fields" time="0.000352925">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; mixed field formats &gt; should handle all standalone fields" time="0.000407435">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle parsing errors gracefully" time="0.000468246">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should return ValidationResult interface" time="0.000684519">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; error handling &gt; should handle very long expressions" time="0.000682529">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with extra whitespace" time="0.000579298">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle expressions with no spaces around operators" time="0.000480876">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; whitespace handling &gt; should handle tabs and other whitespace characters" time="0.000467776">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle single character inputs" time="0.000446996">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only operators" time="0.000389185">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle expressions with only colons" time="0.000393195">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; edge cases &gt; should handle unicode characters" time="0.000973643">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle moderately complex expressions efficiently" time="0.0007358">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; performance &gt; should handle many validation calls efficiently" time="0.030331228">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should validate real-world music search expressions" time="0.001414788">
        </testcase>
        <testcase classname="packages/shared-utils/src/__tests__/validation/validateExpression.test.ts" name="validateExpression &gt; comprehensive integration &gt; should provide helpful error messages" time="0.000590947">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/compareTitles.test.ts" timestamp="2025-09-07T07:18:03.089Z" hostname="c82ba9db4d53" tests="32" failures="0" errors="0" skipped="0" time="0.438342537">
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for undefined inputs" time="0.01146273">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when first parameter is undefined" time="0.002089597">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result when second parameter is undefined" time="0.002073457">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; basic functionality &gt; should return default result for empty strings" time="0.001295737">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches (case insensitive)" time="0.047785217">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should detect exact matches with different cases" time="0.001482219">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should not match different strings" time="0.002002706">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; exact matching &gt; should handle punctuation in matching" time="0.001253907">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should detect when second string contains in first (normalized)" time="0.002642454">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should not detect when first string contains in second" time="0.001312957">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; one-way contains (default) &gt; should handle case insensitive contains" time="0.001159915">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should detect contains in both directions when twoWayContain is true" time="0.00225346">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; two-way contains &gt; should work with two-way contains for equal strings" time="0.002018246">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains for titles shorter than 5 characters" time="0.002035996">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should not use contains when second title is shorter than 5 characters" time="0.001210926">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should use contains when both titles are 5+ characters" time="0.008631184">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; contains functionality &gt; short title exclusion &gt; should handle exactly 5 character strings" time="0.000589648">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return similarity score between 0 and 1" time="0.000662489">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return higher similarity for similar strings" time="0.000489517">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; similarity scoring &gt; should return perfect similarity for identical strings" time="0.00077588">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString for contains logic" time="0.002464872">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should call createSearchString twice for two-way contains" time="0.000573427">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; createSearchString integration &gt; should not call createSearchString for short titles" time="0.001297117">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle music track comparisons" time="0.00300914">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle partial track matches" time="0.001378878">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle remixes and versions" time="0.00376427">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; real-world examples &gt; should handle abbreviations" time="0.001365248">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle very long titles" time="0.008007625">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle special characters" time="0.000419126">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle unicode characters" time="0.000571038">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; edge cases &gt; should handle whitespace variations" time="0.001018573">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/compareTitles.test.ts" name="compareTitles &gt; performance &gt; should handle many comparisons efficiently" time="0.302953239">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/createSearchString.test.ts" timestamp="2025-09-07T07:18:03.104Z" hostname="c82ba9db4d53" tests="24" failures="0" errors="0" skipped="0" time="0.091993768">
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should convert string to lowercase" time="0.020524819">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should trim whitespace" time="0.000796811">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle empty string" time="0.007772642">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; basic functionality &gt; should handle whitespace-only string" time="0.004465728">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; a variants &gt; should normalize à, á, â, ã, ä, å to a" time="0.004718882">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; e variants &gt; should normalize è, é, ê, ë to e" time="0.001383948">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; i variants &gt; should normalize ì, í, î, ï to i" time="0.001759943">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; o variants &gt; should normalize ò, ó, ô, õ, ö to o" time="0.002903128">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; u variants &gt; should normalize ù, ú, û, ü to u" time="0.001958936">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; y variants &gt; should normalize ý, ÿ to y" time="0.001748333">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize æ to ae" time="0.001771434">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize œ to oe" time="0.003447816">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ç to c" time="0.001140775">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; diacritic normalization &gt; special characters &gt; should normalize ñ to n" time="0.00223753">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize music artist names" time="0.001408039">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should normalize song titles" time="0.001980516">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; real-world examples &gt; should handle mixed content" time="0.001159685">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle strings with only diacritics" time="0.000941533">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle mixed case with diacritics" time="0.000947662">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle numbers and special characters" time="0.000363525">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; edge cases &gt; should handle very long strings" time="0.001977616">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; performance &gt; should handle large strings efficiently" time="0.011553081">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should be idempotent" time="0.001037014">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/createSearchString.test.ts" name="createSearchString &gt; consistency &gt; should handle null/undefined gracefully" time="0.000357335">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" timestamp="2025-09-07T07:18:03.115Z" hostname="c82ba9db4d53" tests="39" failures="0" errors="0" skipped="0" time="0.032447347">
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should convert input to lowercase" time="0.003725439">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should trim whitespace from result" time="0.000683629">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle empty string" time="0.00079708">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; basic functionality &gt; should handle whitespace-only string" time="0.000776901">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter out words when filtered=true" time="0.000531537">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should not filter out words when filtered=false" time="0.000433576">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should filter multiple words" time="0.000473216">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle case insensitive filtering" time="0.000603437">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; word filtering &gt; should handle words not in filter list" time="0.000779681">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove quotes when removeQuotes=true" time="0.000543867">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should not remove quotes when removeQuotes=false" time="0.000402165">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should remove various quote types" time="0.000415385">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; quote removal &gt; should handle multiple quote characters" time="0.000560728">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at separators when cutOffSeparators=true" time="0.00080913">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off when cutOffSeparators=false" time="0.000555827">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should cut off at last occurrence of separator" time="0.000390385">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should handle multiple separator types" time="0.000612538">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; separator cut-off &gt; should not cut off if separator not found" time="0.000441456">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove empty brackets" time="0.000399535">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should remove multiple empty brackets" time="0.000304004">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; empty brackets removal &gt; should not remove non-empty brackets" time="0.000363874">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove trailing dashes" time="0.000468246">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should remove multiple trailing dashes" time="0.000356355">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not remove dashes from short strings" time="0.000321974">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should handle starting dashes" time="0.000308354">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; trailing dash removal &gt; should not affect middle dashes" time="0.000312884">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should apply all filters when all flags are true" time="0.000332135">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should handle complex real-world examples" time="0.000366575">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; combined operations &gt; should preserve order of operations" time="0.000612298">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only filtered content" time="0.000416606">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle repeated separators" time="0.000331444">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle mixed whitespace" time="0.003507776">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle very long strings" time="0.000840941">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; edge cases &gt; should handle strings with only separators" time="0.000348605">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should call getCurrentMusicSearchConfig" time="0.000683929">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should use configuration values" time="0.000376305">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; configuration dependency &gt; should handle empty configuration arrays" time="0.000334195">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle many filter operations efficiently" time="0.000513866">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/filterOutWords.test.ts" name="filterOutWords &gt; performance &gt; should handle large filter arrays efficiently" time="0.001816893">
        </testcase>
    </testsuite>
    <testsuite name="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" timestamp="2025-09-07T07:18:03.131Z" hostname="c82ba9db4d53" tests="14" failures="0" errors="0" skipped="0" time="0.018008506">
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; returns clean song titles" time="0.004486789">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes feat markers" time="0.000714129">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; removes parentheses content" time="0.000680019">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; happy path &gt; prioritizes first occurrence" time="0.000702089">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;&quot; -&gt; &quot;&quot;" time="0.000429956">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;(&quot; -&gt; &quot;&quot;" time="0.000271344">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;feat&quot; -&gt; &quot;&quot;" time="0.000424856">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles boundary inputs: &quot;a&quot; -&gt; &quot;a&quot;" time="0.000266824">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; removes from first &quot;feat&quot; occurrence" time="0.000565247">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; handles case sensitivity" time="0.000647778">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; edge cases &gt; ignores closing parenthesis only" time="0.000316564">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; error handling &gt; handles null and undefined inputs" time="0.002145648">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Despacito feat. Justin Bieber&quot;" time="0.000388595">
        </testcase>
        <testcase classname="packages/music-search/src/__tests__/utils/removeFeaturing.test.ts" name="removeFeaturing &gt; real-world examples &gt; processes common patterns: &quot;Bohemian Rhapsody (Live Aid 1985)&quot;" time="0.000717949">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/api/index.test.ts" timestamp="2025-09-07T07:18:03.137Z" hostname="c82ba9db4d53" tests="2" failures="0" errors="0" skipped="0" time="0.020965145">
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should create mock request and response objects" time="0.011849535">
        </testcase>
        <testcase classname="apps/web/__tests__/api/index.test.ts" name="API Test Utilities &gt; should verify response helper works" time="0.003915021">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/hooks/useDualModeEditor.test.ts" timestamp="2025-09-07T07:18:03.138Z" hostname="c82ba9db4d53" tests="3" failures="0" errors="0" skipped="0" time="0.044375362">
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should initialize with default state" time="0.028421743">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should switch view modes" time="0.007029323">
        </testcase>
        <testcase classname="apps/web/__tests__/hooks/useDualModeEditor.test.ts" name="useDualModeEditor Hook &gt; should update data when changed" time="0.005142537">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/pages/index.test.tsx" timestamp="2025-09-07T07:18:03.140Z" hostname="c82ba9db4d53" tests="27" failures="0" errors="0" skipped="0" time="5.033096718">
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render loading state initially" time="0.26650606">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Initial Loading State &gt; should render without crashing" time="0.060832038">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection component when not connected" time="0.070238692">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Not Connected State &gt; should show PlexConnection when connected but no URI" time="0.035621248">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should show main content when connected with URI" time="0.390893794">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render all menu items" time="0.226389523">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render menu items as clickable cards" time="0.157007532">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Connected State &gt; should render Plex Settings button" time="0.119642481">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should open Plex settings dialog when button is clicked" time="0.310152433">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Settings Dialog &gt; should close Plex settings dialog when close button is clicked" time="0.414775007">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex query parameter on router ready" time="0.217453216">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle successful plex verification" time="0.179283015">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should not process plex query when router is not ready" time="0.026944324">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Plex Authentication Query Parameter &gt; should handle plex verification failure" time="0.024054286">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle settings API error gracefully" time="0.020903025">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; API Error Handling &gt; should handle auth verification error" time="0.03881577">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should update state when connection is established through PlexConnection" time="0.233586537">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; State Management &gt; should handle loading state changes correctly" time="0.092965861">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnection" time="0.032377005">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Component Integration &gt; should pass correct props to PlexConnectionDialog" time="0.240361676">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have proper page title" time="0.076388243">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible navigation links" time="0.261657687">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible button for Plex settings" time="0.110952667">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Accessibility &gt; should have accessible dialog when opened" time="0.21396203">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle multiple rapid state changes" time="1.139316133">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should cleanup properly on unmount" time="0.034722716">
        </testcase>
        <testcase classname="apps/web/__tests__/pages/index.test.tsx" name="Index Page &gt; Performance and Edge Cases &gt; should handle component re-renders without unnecessary API calls" time="0.029741211">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" timestamp="2025-09-07T07:18:03.150Z" hostname="c82ba9db4d53" tests="7" failures="0" errors="0" skipped="0" time="1.864753719">
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should render without crashing" time="0.120278769">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should not display confirmation dialog initially" time="0.03349967">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display confirmation dialog when triggered" time="0.65559165">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should work with exported confirm function" time="0.144478407">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should display custom confirmation text" time="0.244332178">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when confirm button is clicked" time="0.378206377">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ConfirmProvider/ConfirmProvider.test.tsx" name="ConfirmProvider &gt; Basic Functionality &gt; should close dialog when cancel button is clicked" time="0.280163089">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" timestamp="2025-09-07T07:18:03.156Z" hostname="c82ba9db4d53" tests="25" failures="1" errors="0" skipped="0" time="1.761705716">
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without crashing" time="0.138517789">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render with children" time="0.025696688">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render multiple children" time="0.032221823">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Basic Rendering &gt; should render without children" time="0.031307451">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should apply HTML attributes correctly" time="0.04798579">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle click events" time="0.02965083">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle mouse events" time="0.022249362">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Props Handling &gt; should handle keyboard events" time="0.027166756">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should have Material-UI Paper base styling" time="0.035282833">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should apply custom margin top styling" time="0.238453751">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Styling and Theme Integration &gt; should merge with additional sx props when provided" time="0.029914633">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should be keyboard accessible when tabIndex is provided" time="0.016954683">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support ARIA attributes" time="0.026252845">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Accessibility &gt; should support screen reader content" time="0.037867647">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render text content" time="0.033765894">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render React elements" time="0.019521726">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should render arrays of elements" time="0.051903982">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle conditional rendering" time="0.058487688">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Content Types &gt; should handle complex nested content" time="0.054641787">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle null children gracefully" time="0.022746038">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle empty string children" time="0.017311737">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle numeric children" time="0.020248266">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Edge Cases &gt; should handle mixed content types" time="0.022414815">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should not re-render unnecessarily with same props" time="0.02967739">
        </testcase>
        <testcase classname="apps/web/__tests__/components/CustomPaper/CustomPaper.test.tsx" name="CustomPaper &gt; Performance &gt; should handle large amounts of content efficiently" time="0.685079667">
            <failure message="expected 595.3125680000003 to be less than 500" type="AssertionError">
AssertionError: expected 595.3125680000003 to be less than 500
 ❯ __tests__/components/CustomPaper/CustomPaper.test.tsx:414:32
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" timestamp="2025-09-07T07:18:03.168Z" hostname="c82ba9db4d53" tests="33" failures="0" errors="0" skipped="0" time="3.908643691">
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render without crashing" time="0.219077157">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should display the correct title" time="0.043512901">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render all action buttons" time="0.045343315">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render view mode toggle buttons" time="0.035805771">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Basic Rendering &gt; should render icons within buttons" time="0.037954579">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show UI mode as selected by default" time="0.033644262">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should show JSON mode as selected when specified" time="0.049525751">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when UI mode is clicked" time="0.28857905">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should call onViewModeChange when JSON mode is clicked" time="0.203542323">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should handle clicking the same mode button" time="0.158017755">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; View Mode Toggle &gt; should be exclusive selection (only one mode selected at a time)" time="0.060288362">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onReset when reset button is clicked" time="0.105894181">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should call onSave when save button is clicked" time="0.101783696">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should handle multiple rapid clicks on action buttons" time="0.314448999">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Action Buttons &gt; should support keyboard interaction on action buttons" time="0.174751435">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should disable all interactive elements when disabled prop is true" time="0.084441929">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is false" time="0.03730176">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should enable all interactive elements when disabled prop is undefined" time="0.066364061">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Disabled State &gt; should not trigger callbacks when buttons are disabled" time="0.038535276">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have proper layout structure" time="0.073314363">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should apply proper button variants and sizes" time="0.064368525">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Layout and Styling &gt; should have divider between toggle buttons and action buttons" time="0.038475656">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have proper ARIA attributes" time="0.032238283">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should be keyboard navigable" time="0.038503585">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should have appropriate button labels" time="0.075657524">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Accessibility &gt; should indicate selected state for view mode buttons" time="0.093813532">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle empty title gracefully" time="0.058842403">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle very long titles" time="0.051958882">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle null callback functions gracefully" time="0.065064004">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should handle rapid view mode changes" time="0.526073939">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Edge Cases &gt; should maintain state consistency during re-renders" time="0.087183665">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should not cause unnecessary re-renders with same props" time="0.051190342">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EditorHeader/EditorHeader.test.tsx" name="EditorHeader &gt; Performance &gt; should handle high frequency interactions efficiently" time="0.527944703">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" timestamp="2025-09-07T07:18:03.179Z" hostname="c82ba9db4d53" tests="4" failures="0" errors="0" skipped="0" time="0.273794866">
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should render without crashing" time="0.153245513">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should display JSON value" time="0.027250458">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle valid JSON changes" time="0.051392205">
        </testcase>
        <testcase classname="apps/web/__tests__/components/EnhancedMonacoJsonEditor/EnhancedMonacoJsonEditor.test.tsx" name="EnhancedMonacoJsonEditor &gt; should handle null value gracefully" time="0.038370944">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" timestamp="2025-09-07T07:18:03.181Z" hostname="c82ba9db4d53" tests="19" failures="0" errors="0" skipped="0" time="3.865558945">
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should provide showError function through context" time="0.190560733">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Context Value Propagation &gt; should not display error dialog initially" time="0.033759123">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via context" time="0.59088831">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display error dialog when showError is called via export" time="0.225952467">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should display stack trace when provided" time="0.509567121">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Display &gt; should not display stack trace section when stack trace is same as error message" time="0.16297527">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when Escape key is pressed" time="0.151967305">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should close dialog when close button is clicked" time="0.275937944">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Keyboard Navigation &gt; should focus close button when dialog opens" time="0.210085089">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle empty error message gracefully" time="0.098849258">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle long error messages" time="0.161784775">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Message Formatting &gt; should handle special characters in error messages" time="0.148698183">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should have proper ARIA attributes" time="0.162373813">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Dialog Accessibility &gt; should trap focus within the dialog" time="0.208186284">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should cleanup properly on unmount" time="0.101593954">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle multiple error triggers correctly" time="0.195958273">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Component Cleanup &gt; should handle rapid error triggers" time="0.117515843">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should display dialog with correct title" time="0.147172223">
        </testcase>
        <testcase classname="apps/web/__tests__/components/ErrorProvider/ErrorProvider.test.tsx" name="ErrorProvider &gt; Error Dialog Content &gt; should have full width and small max width" time="0.156805619">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" timestamp="2025-09-07T07:18:03.188Z" hostname="c82ba9db4d53" tests="20" failures="0" errors="0" skipped="0" time="3.29482543">
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should render loading state initially" time="0.289768185">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should load data on mount" time="0.068845434">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Component Initialization &gt; should start in UI mode by default" time="0.224987585">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should switch between UI and JSON modes" time="0.183780214">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Mode Switching &gt; should convert data when switching modes" time="0.166250093">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate filter expressions correctly" time="0.300089541">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should accept valid filter expressions" time="0.159754118">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Filter Validation &gt; should validate array structure" time="0.166827971">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should save filters successfully" time="0.072437141">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should reset filters to original data" time="0.130202159">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Save and Load Operations &gt; should not reset if user cancels confirmation" time="0.066640675">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should display error for invalid JSON syntax" time="0.189165005">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Display for Invalid JSON &gt; should clear validation errors when switching modes" time="0.210807268">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should display filters in UI mode" time="0.02589565">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; UI Mode Interactions &gt; should update filters in UI mode" time="0.175741628">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Loading States &gt; should disable controls during loading" time="0.153321264">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle keyboard shortcuts in JSON mode" time="0.194897269">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Keyboard Navigation &gt; should handle tab navigation between controls" time="0.123518042">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API load errors gracefully" time="0.278771401">
        </testcase>
        <testcase classname="apps/web/__tests__/components/MatchFilterEditor/MatchFilterEditor.test.tsx" name="MatchFilterEditor &gt; Error Handling &gt; should handle API save errors gracefully" time="0.107404831">
        </testcase>
    </testsuite>
    <testsuite name="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" timestamp="2025-09-07T07:18:03.195Z" hostname="c82ba9db4d53" tests="38" failures="0" errors="0" skipped="0" time="3.168170756">
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with empty state when no value provided" time="0.103040623">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should render with custom placeholder" time="0.027714424">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should parse existing expression into pills" time="0.048095861">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Component Initialization &gt; should handle disabled state" time="0.025566336">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse simple field expressions" time="0.129514821">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should parse complex expressions with combinators" time="0.049564171">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle incomplete expressions" time="0.069791037">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle similarity expressions with thresholds" time="0.033357848">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Parsing and Validation &gt; should handle invalid expressions gracefully" time="0.032219883">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should open field selector when add pill is clicked" time="0.121636257">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add field when selected from popup" time="0.118606327">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should add AND combinator when adding second field" time="0.147325265">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Adding Fields &gt; should not open selector when disabled" time="0.081113275">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should open operation selector when field pill is clicked" time="0.066306141">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should update operation when selected from popup" time="0.138857604">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should handle similarity operation with threshold" time="0.127721427">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should show current operation in popup" time="0.081969456">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Editing Operations &gt; should not open operation selector when disabled" time="0.062031034">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should delete pill when delete button is clicked in operation popup" time="0.118936252">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should remove combinator when deleting condition pill" time="0.128496668">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Pill Deletion &gt; should handle deletion of middle pill in complex expression" time="0.111102029">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-2&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-2&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle escape key to close popups" time="0.111193071">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle tab navigation through pills" time="0.155830496">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Keyboard Navigation &gt; should handle enter key to activate pills" time="0.035389124">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle completely invalid expression" time="0.029528538">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle mixed valid and invalid tokens" time="0.025722358">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Invalid Input Handling &gt; should handle empty field values gracefully" time="0.018475553">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close field selector when close button is clicked" time="0.108374623">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close operation selector when close button is clicked" time="0.153606437">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Popup Interactions &gt; should close popups when clicking outside" time="0.099854131">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with small size" time="0.016981403">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Size Variants &gt; should render with medium size" time="0.019410834">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should have proper ARIA attributes" time="0.019235133">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should announce pill configuration state" time="0.052104694">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Accessibility &gt; should support keyboard navigation" time="0.064365985">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should call onChange with updated expression when pills change" time="0.137157072">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: AddPill][39m,
      type: [36m[Function: AddPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      onClick: [36m[Function (anonymous)][39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m1[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    onClick: [36m[Function (anonymous)][39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: AddPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should preserve other pills when updating one pill" time="0.160904993">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
        <testcase classname="apps/web/__tests__/components/PillEditor/PillEditor.test.tsx" name="PillEditor &gt; Expression Updates &gt; should handle rapid updates without conflicts" time="0.125847493">
            <system-out>
Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

Field selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}
Operation selector positioning element: [36m&lt;ref *1&gt;[39m HTMLDivElement {
  [32m&apos;__reactFiber$aa0ufy3wh9k&apos;[39m: [36m&lt;ref *2&gt;[39m FiberNode {
    tag: [33m5[39m,
    key: [1mnull[22m,
    elementType: [32m&apos;div&apos;[39m,
    type: [32m&apos;div&apos;[39m,
    stateNode: [36m[Circular *1][39m,
    return: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    child: FiberNode {
      tag: [33m0[39m,
      key: [1mnull[22m,
      elementType: [36m[Function: FieldPill][39m,
      type: [36m[Function: FieldPill][39m,
      stateNode: [1mnull[22m,
      return: [36m[Circular *2][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m0[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    sibling: [1mnull[22m,
    index: [33m1[39m,
    ref: [1mnull[22m,
    pendingProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    memoizedProps: {
      className: [32m&apos;MuiBox-root css-0&apos;[39m,
      id: [32m&apos;pill-pill-0&apos;[39m,
      children: [36m[Object][39m
    },
    updateQueue: [1mnull[22m,
    memoizedState: [1mnull[22m,
    dependencies: [1mnull[22m,
    mode: [33m1[39m,
    flags: [33m1048576[39m,
    subtreeFlags: [33m1[39m,
    deletions: [1mnull[22m,
    lanes: [33m0[39m,
    childLanes: [33m0[39m,
    alternate: FiberNode {
      tag: [33m5[39m,
      key: [1mnull[22m,
      elementType: [32m&apos;div&apos;[39m,
      type: [32m&apos;div&apos;[39m,
      stateNode: [36m[Circular *1][39m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m1[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [1mnull[22m,
      mode: [33m1[39m,
      flags: [33m0[39m,
      subtreeFlags: [33m5[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[Circular *2][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [1mnull[22m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [1mnull[22m
    },
    actualDuration: [33m0[39m,
    actualStartTime: [33m-1[39m,
    selfBaseDuration: [33m0[39m,
    treeBaseDuration: [33m0[39m,
    _debugSource: [1mnull[22m,
    _debugOwner: FiberNode {
      tag: [33m11[39m,
      key: [1mnull[22m,
      elementType: [36m[Object][39m,
      type: [36m[Object][39m,
      stateNode: [1mnull[22m,
      return: [36m[FiberNode][39m,
      child: [36m[FiberNode][39m,
      sibling: [1mnull[22m,
      index: [33m0[39m,
      ref: [1mnull[22m,
      pendingProps: [36m[Object][39m,
      memoizedProps: [36m[Object][39m,
      updateQueue: [1mnull[22m,
      memoizedState: [1mnull[22m,
      dependencies: [36m[Object][39m,
      mode: [33m1[39m,
      flags: [33m1[39m,
      subtreeFlags: [33m1048581[39m,
      deletions: [1mnull[22m,
      lanes: [33m0[39m,
      childLanes: [33m0[39m,
      alternate: [36m[FiberNode][39m,
      actualDuration: [33m0[39m,
      actualStartTime: [33m-1[39m,
      selfBaseDuration: [33m0[39m,
      treeBaseDuration: [33m0[39m,
      _debugSource: [90mundefined[39m,
      _debugOwner: [36m[FiberNode][39m,
      _debugNeedsRemount: [33mfalse[39m,
      _debugHookTypes: [36m[Array][39m
    },
    _debugNeedsRemount: [33mfalse[39m,
    _debugHookTypes: [1mnull[22m
  },
  [32m&apos;__reactProps$aa0ufy3wh9k&apos;[39m: {
    className: [32m&apos;MuiBox-root css-0&apos;[39m,
    id: [32m&apos;pill-pill-0&apos;[39m,
    children: {
      [32m&apos;$$typeof&apos;[39m: [32mSymbol(react.element)[39m,
      type: [36m[Function: FieldPill][39m,
      key: [1mnull[22m,
      ref: [1mnull[22m,
      props: [36m[Object][39m,
      _owner: [36m[FiberNode][39m,
      _store: {}
    }
  }
}

Field selector positioning element: [1mnull[22m
Operation selector positioning element: [1mnull[22m

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
